[
  {
    "id": "JS_fundamentals|variables|1",
    "multiChoice": true,
    "question": "Which of these variable names are legal in JavaScript?",
    "options": [
      { "id": "1", "val": "_myVar", "correct": true },
      { "id": "2", "val": "MyVar", "correct": true },
      { "id": "3", "val": "my-var", "correct": false },
      { "id": "4", "val": "myVar1", "correct": true },
      { "id": "5", "val": "123myVar", "correct": false },
      { "id": "6", "val": "my_var123", "correct": true },
      { "id": "7", "val": "my@var", "correct": false },
      { "id": "8", "val": "$myVyar", "correct": true },
      { "id": "9", "val": "var", "correct": false }
    ]
  },
  {
    "id": "JS_fundamentals|variables|2",
    "question": [
      {
        "type": "Text",
        "value": "Whit is the output of the code below?"
      },
      {
        "type": "Code",
        "value": "const name = 'John'\nconsole.log(Name)",
        "props": { "language": "javascript" }
      }
    ],
    "options": [
      { "id": "1", "val": "John", "correct": false },
      { "id": "2", "val": "undefined", "correct": false },
      { "id": "3", "val": "Error", "correct": true }
    ],
    "explanation": "JavaScript is case-sensitive. Name is a completely different variable than name. On line 2, a new variable is indeed declared, but since it wasn't preceded by any keyword, console.log will result in an error. If var, let, or const had been used, the result would be undefined."
  },
  {
    "id": "JS_fundamentals|variables|3",
    "multiChoice": true,
    "question": "You are building an app. Which keywords would you use in order to define a new variable?",
    "options": [
      { "id": "1", "val": "var", "correct": false },
      { "id": "2", "val": "let", "correct": true },
      { "id": "3", "val": "const", "correct": true },
      { "id": "4", "val": "I wouldn't use any keyword", "correct": false }
    ]
  },
  {
    "id": "JS_fundamentals|variables|4",
    "question": [
      {
        "type": "Text",
        "value": "What would be the outputs of the following code snippets?"
      },
      {
        "type": "Code",
        "value": "console.log(x)\nlet x = 10",
        "props": { "language": "javascript" }
      },
      {
        "type": "Code",
        "value": "console.log(x)\nvar x = 10",
        "props": { "language": "javascript" }
      },
      {
        "type": "Code",
        "value": "console.log(x)\nconst x = 10",
        "props": { "language": "javascript" }
      }
    ],
    "options": [
      { "id": "1", "val": "undefined, 10, undefined", "correct": false },
      { "id": "2", "val": "Error, 10, undefined", "correct": false },
      { "id": "3", "val": "10, undefined, undefined", "correct": false },
      { "id": "4", "val": "Error, undefined, Error", "correct": true },
      { "id": "5", "val": "10, undefined, 10", "correct": false }
    ]
  },
  {
    "id": "JS_fundamentals|variables|5",
    "question": [
      {
        "type": "Text",
        "value": "What would be the outputs of the following code snippets?"
      },
      {
        "type": "Code",
        "value": "console.log(window.x)\nvar x = 10",
        "props": { "language": "javascript" }
      },
      {
        "type": "Code",
        "value": "console.log(window.x)\nlet x = 10",
        "props": { "language": "javascript" }
      },
      {
        "type": "Code",
        "value": "console.log(window.x)\nconst x = 10",
        "props": { "language": "javascript" }
      },
      {
        "type": "Code",
        "value": "console.log(window.x)\nx = 10",
        "props": { "language": "javascript" }
      }
    ],
    "options": [
      { "id": "1", "val": "undefined, 10, 10, Error", "correct": false },
      { "id": "2", "val": "undefined, 10, 10, undefined", "correct": false },
      {
        "id": "3",
        "val": "undefined, 10, undefined undefined",
        "correct": false
      },
      { "id": "4", "val": "10, undefined, undefined, Error", "correct": false },
      { "id": "5", "val": "10, undefined, undefined, 10", "correct": true }
    ]
  },
  {
    "id": "JS_fundamentals|variables|6",
    "multiChoice": true,
    "question": [
      {
        "type": "Text",
        "value": "Which of these variables can be redefined?"
      },
      {
        "type": "Code",
        "value": "const a = 1\nvar b = 2\n let c = 3\nd=4",
        "props": { "language": "javascript" }
      }
    ],
    "options": [
      { "id": "1", "val": "a", "correct": false },
      { "id": "2", "val": "b", "correct": true },
      { "id": "3", "val": "c", "correct": false },
      { "id": "4", "val": "d", "correct": true }
    ],
    "explanation": [
      {
        "type": "Code",
        "value": "const a = 1\nconst a = 11 // Error\nvar b = 2\nvar b = 12 // ok\nlet c = 3\nlet c = 13 // Error\nd=4\nd=14 // ok",
        "props": { "language": "javascript" }
      }
    ]
  },
  {
    "id": "JS_fundamentals|variables|7",
    "question": [
      {
        "type": "Text",
        "value": "What would be the output of the following code snippet?"
      },
      {
        "type": "Code",
        "value": "var fruit = 'apple'\nlet vegetable = 'potato'\n\n{\n  var fruit = 'orange'\n  let vegetable = 'carrot'\n\n  console.log(fruit) \n  console.log(vegetable) \n}\n\nconsole.log(fruit) \nconsole.log(vegetable) ",
        "props": { "language": "javascript" }
      }
    ],
    "options": [
      { "id": "1", "val": "orange, carrot, apple, carrot", "correct": false },
      { "id": "2", "val": "orange, carrot, orange, potato", "correct": true },
      { "id": "3", "val": "orange, carrot, orange, carrot", "correct": false },
      { "id": "4", "val": "an error will occur", "correct": false }
    ],
    "explanation": [
      {
        "type": "Text",
        "value": "The var keyword does not have block scope, so the fruit variable inside the block affects the global fruit. The let keyword has block scope, so the vegetable variable inside the block does not affect the global vegetable. As a result, the fruit variable is overwritten globally, while the vegetable variable inside the block shadows the global one without affecting it outside the block."
      },
      {
        "type": "Code",
        "value": "var fruit = 'apple'\nlet vegetable = 'potato'\n\n{\n  var fruit = 'orange'\n  let vegetable = 'carrot'\n\n  console.log(fruit) // orange \n  console.log(vegetable) //carrot \n}\n\nconsole.log(fruit) //orange \nconsole.log(vegetable) //potato",
        "props": { "language": "javascript" }
      }
    ]
  },
  {
    "id": "JS_fundamentals|variables|8",
    "question": [
      {
        "type": "Text",
        "value": "What is the output of the following code?"
      },
      {
        "type": "Code",
        "value": "a = 10\nvar a\n console.log(a)",
        "props": { "language": "javascript" }
      }
    ],
    "options": [
      { "id": "1", "val": "undefined", "correct": false },
      { "id": "2", "val": "Error", "correct": false },
      { "id": "3", "val": "10", "correct": true }
    ],
    "explanation": [
      {
        "type": "Text",
        "value": "Due to the hoisting concept, the code above is equal to:"
      },
      {
        "type": "Code",
        "value": "var a = undefined // placed at the top of the scope\na = 10 // variable assignment\nconsole.log(b) // 10",
        "props": { "language": "javascript" }
      }
    ]
  },
  {
    "id": "JS_fundamentals|variables|9",
    "question": [
      {
        "type": "Text",
        "value": "What is the output of the following code?"
      },
      {
        "type": "Code",
        "value": "var x\nconsole.log(x)\nx=10\nconsole.log(x)",
        "props": { "language": "javascript" }
      }
    ],
    "options": [
      { "id": "1", "val": "undefined, 10", "correct": true },
      { "id": "2", "val": "undefined, undefined", "correct": false },
      { "id": "3", "val": "10, 10", "correct": false },
      { "id": "4", "val": "Error", "correct": false }
    ]
  },
  {
    "id": "JS_fundamentals|variables|10",
    "question": [
      {
        "type": "Text",
        "value": "What is the output of the following code?"
      },
      {
        "type": "Code",
        "value": "function fn(){\n   var a = 10\n}\n\nconsole.log(window.a)",
        "props": { "language": "javascript" }
      }
    ],
    "options": [
      { "id": "1", "val": "undefined", "correct": true },
      { "id": "2", "val": "10", "correct": false },
      { "id": "3", "val": "Error", "correct": false }
    ],
    "explanation": "If var is used in global context, the variable becomes a property of the global object. however, the interior of a function is not a part of the global context."
  },
  {
    "id": "JS_fundamentals|variables|10",
    "multiChoice": true,
    "question": [
      {
        "type": "Text",
        "value": "Will this throw an error and why?"
      },
      {
        "type": "Code",
        "value": "{\n   const a = 10\n}\n\n{\n   const a = 20\n}",
        "props": { "language": "javascript" }
      }
    ],
    "options": [
      { "id": "1", "val": "Yes, const can't be redeclared", "correct": false },
      { "id": "2", "val": "Yes, const can't be reassigned", "correct": false },
      {
        "id": "3",
        "val": "No, those are two different scopes",
        "correct": true
      }
    ],
    "explanation": [
      {
        "type": "Text",
        "value": "Curly brackets create new scope for const (and let) variables."
      }
    ]
  },
  {
    "id": "JS_fundamentals|variables|11",
    "question": "What term is used to describe the place above const or let declaration?",
    "options": [
      { "id": "1", "val": "hoisting zone", "correct": false },
      { "id": "2", "val": "context execution zone", "correct": false },
      { "id": "3", "val": "strict zone", "correct": false },
      { "id": "4", "val": "temporal dead zone", "correct": true }
    ]
  },
  {
    "id": "JS_fundamentals|variables|12",
    "question": [
      {
        "type": "Text",
        "value": "What is the output of the following code?"
      },
      {
        "type": "Code",
        "value": "var a = 10\n\n{\n   var a = 20\n}\n\nconsole.log(a)",
        "props": { "language": "javascript" }
      }
    ],
    "options": [
      { "id": "1", "val": "10", "correct": false },
      { "id": "2", "val": "20", "correct": true }
    ],
    "explanation": [
      {
        "type": "Text",
        "value": "Var has functional scope, not block. This means curly brackets are 'invisible' for it, like that:"
      },
      {
        "type": "Code",
        "value": "var a = 10\n\nvar a = 20\n",
        "props": { "language": "javascript" }
      }
    ]
  },
  {
    "id": "JS_fundamentals|variables|13",
    "question": [
      {
        "type": "Text",
        "value": "What is the output of the following code?"
      },
      {
        "type": "Code",
        "value": "let a = 10\n\n{\n   console.log(a)\n   let a = 20\n}",
        "props": { "language": "javascript" }
      }
    ],
    "options": [
      { "id": "1", "val": "10", "correct": false },
      { "id": "2", "val": "20", "correct": false },
      { "id": "3", "val": "undefined", "correct": false },
      { "id": "4", "val": "Error", "correct": true }
    ],
    "explanation": [
      {
        "type": "Text",
        "value": "In the code snippet, a declared inside the block with let shadows the global a. When you attempt to console.log(a) inside the block before the let a = 20 declaration, it results in a ReferenceError because the block-scoped a is in a \"temporal dead zone\" until it's declared."
      }
    ]
  }
]
