[
  {
    "id": "JS_fundamentals|declaration_keywords|3",
    "multiChoice": true,
    "question": "You are building an app. Which keywords would you use in order to define a new variable?",
    "options": [
      { "id": "1", "val": "var", "correct": false },
      { "id": "2", "val": "let", "correct": true },
      { "id": "3", "val": "const", "correct": true },
      { "id": "4", "val": "I wouldn't use any keyword", "correct": false }
    ]
  },
  {
    "id": "JS_fundamentals|declaration_keywords|4",
    "question": [
      {
        "type": "Code",
        "value": "console.log(x)\nlet x = 10",
        "props": { "language": "javascript" }
      },
      {
        "type": "Code",
        "value": "console.log(x)\nvar x = 10",
        "props": { "language": "javascript" }
      },
      {
        "type": "Code",
        "value": "console.log(x)\nconst x = 10",
        "props": { "language": "javascript" }
      },
      {
        "type": "CText",
        "value": "What would be the outputs of those code snippets?"
      }
    ],
    "options": [
      { "id": "1", "val": "undefined, 10, undefined", "correct": false },
      { "id": "2", "val": "Error, 10, undefined", "correct": false },
      { "id": "3", "val": "10, undefined, undefined", "correct": false },
      { "id": "4", "val": "Error, undefined, Error", "correct": true },
      { "id": "5", "val": "10, undefined, 10", "correct": false }
    ]
  },
  {
    "id": "JS_fundamentals|declaration_keywords|5",
    "question": [
      {
        "type": "Code",
        "value": "console.log(window.x)\nvar x = 10",
        "props": { "language": "javascript" }
      },
      {
        "type": "Code",
        "value": "console.log(window.x)\nlet x = 10",
        "props": { "language": "javascript" }
      },
      {
        "type": "Code",
        "value": "console.log(window.x)\nconst x = 10",
        "props": { "language": "javascript" }
      },
      {
        "type": "Code",
        "value": "console.log(window.x)\nx = 10",
        "props": { "language": "javascript" }
      },
      {
        "type": "CText",
        "value": "What would be the outputs of those code snippets?"
      }
    ],
    "options": [
      { "id": "1", "val": "undefined, 10, 10, Error", "correct": false },
      { "id": "2", "val": "undefined, 10, 10, undefined", "correct": false },
      {
        "id": "3",
        "val": "undefined, 10, undefined undefined",
        "correct": false
      },
      { "id": "4", "val": "10, undefined, undefined, Error", "correct": false },
      { "id": "5", "val": "10, undefined, undefined, 10", "correct": true }
    ]
  },
  {
    "id": "JS_fundamentals|declaration_keywords|6",
    "multiChoice": true,
    "question": [
      {
        "type": "CText",
        "value": "Which of these variables can be redefined?"
      },
      {
        "type": "Code",
        "value": "const a = 1\nvar b = 2\nlet c = 3\nd = 4",
        "props": { "language": "javascript" }
      }
    ],
    "options": [
      { "id": "1", "val": "a", "correct": false },
      { "id": "2", "val": "b", "correct": true },
      { "id": "3", "val": "c", "correct": false },
      { "id": "4", "val": "d", "correct": true }
    ],
    "explanation": [
      {
        "type": "Code",
        "value": "const a = 1\nconst a = 11 // Error\nvar b = 2\nvar b = 12 // ok\nlet c = 3\nlet c = 13 // Error\nd=4\nd=14 // ok",
        "props": { "language": "javascript" }
      }
    ]
  },
  {
    "id": "JS_fundamentals|declaration_keywords|7",
    "question": [
      {
        "type": "Code",
        "value": "var fruit = 'apple'\nlet vegetable = 'potato'\n\n{\n  var fruit = 'orange'\n  let vegetable = 'carrot'\n\n  console.log(fruit) \n  console.log(vegetable) \n}\n\nconsole.log(fruit) \nconsole.log(vegetable) ",
        "props": { "language": "javascript" }
      },
      {
        "type": "CText",
        "value": "What would be the output of the code above?"
      }
    ],
    "options": [
      { "id": "1", "val": "orange, carrot, apple, carrot", "correct": false },
      { "id": "2", "val": "orange, carrot, orange, potato", "correct": true },
      { "id": "3", "val": "orange, carrot, orange, carrot", "correct": false },
      { "id": "4", "val": "an error will occur", "correct": false }
    ],
    "explanation": [
      {
        "type": "CText",
        "value": "The <ins>var</ins> keyword does not have block scope, so the <ins>fruit</ins> variable inside the block affects the global <ins>fruit</ins>. The <ins>let</ins> keyword has block scope, so the <ins>vegetable</ins> variable inside the block does not affect the global <ins>vegetable</ins>. As a result, the <ins>fruit</ins> variable is overwritten globally, while the <ins>vegetable</ins> variable inside the block shadows the global one without affecting it outside the block."
      },
      {
        "type": "Code",
        "value": "var fruit = 'apple'\nlet vegetable = 'potato'\n\n{\n  var fruit = 'orange'\n  let vegetable = 'carrot'\n\n  console.log(fruit) // orange \n  console.log(vegetable) //carrot \n}\n\nconsole.log(fruit) //orange \nconsole.log(vegetable) //potato",
        "props": { "language": "javascript" }
      }
    ]
  },
  {
    "id": "JS_fundamentals|declaration_keywords|8",
    "question": [
      {
        "type": "Code",
        "value": "a = 10\nvar a\n console.log(a)",
        "props": { "language": "javascript" }
      },
      {
        "type": "CText",
        "value": "What is the output of the code above?"
      }
    ],
    "options": [
      { "id": "1", "val": "undefined", "correct": false },
      { "id": "2", "val": "Error", "correct": false },
      { "id": "3", "val": "10", "correct": true }
    ],
    "explanation": [
      {
        "type": "CText",
        "value": "Due to the hoisting concept, the code above is equal to:"
      },
      {
        "type": "Code",
        "value": "var a = undefined // placed at the top of the scope\na = 10 // variable assignment\nconsole.log(b) // 10",
        "props": { "language": "javascript" }
      }
    ]
  },
  {
    "id": "JS_fundamentals|declaration_keywords|9",
    "question": [
      {
        "type": "Code",
        "value": "var x\nconsole.log(x)\nx=10\nconsole.log(x)",
        "props": { "language": "javascript" }
      },
      {
        "type": "CText",
        "value": "What is the output of the code above?"
      }
    ],
    "options": [
      { "id": "1", "val": "undefined, 10", "correct": true },
      { "id": "2", "val": "undefined, undefined", "correct": false },
      { "id": "3", "val": "10, 10", "correct": false },
      { "id": "4", "val": "Error", "correct": false }
    ]
  },
  {
    "id": "JS_fundamentals|declaration_keywords|10",
    "question": [
      {
        "type": "Code",
        "value": "function fn(){\n   var a = 10\n}\n\nconsole.log(window.a)",
        "props": { "language": "javascript" }
      },
      {
        "type": "CText",
        "value": "What is the output of the code above?"
      }
    ],
    "options": [
      { "id": "1", "val": "undefined", "correct": true },
      { "id": "2", "val": "10", "correct": false },
      { "id": "3", "val": "Error", "correct": false }
    ],
    "explanation": "If var is used in global context, the variable becomes a property of the global object. however, the interior of a function is not a part of the global context."
  },
  {
    "id": "JS_fundamentals|declaration_keywords|10",
    "multiChoice": true,
    "question": [
      {
        "type": "CText",
        "value": "Will this throw an error and why?"
      },
      {
        "type": "Code",
        "value": "{\n   const a = 10\n}\n\n{\n   const a = 20\n}",
        "props": { "language": "javascript" }
      }
    ],
    "options": [
      { "id": "1", "val": "Yes, const can't be redeclared", "correct": false },
      { "id": "2", "val": "Yes, const can't be reassigned", "correct": false },
      {
        "id": "3",
        "val": "No, those are two different scopes",
        "correct": true
      }
    ],
    "explanation": [
      {
        "type": "CText",
        "value": "Curly brackets create new scope for <ins>const</ins> (and <ins>let</ins>) variables."
      }
    ]
  },
  {
    "id": "JS_fundamentals|declaration_keywords|11",
    "question": "What term is used to describe the place above const or let declaration?",
    "options": [
      { "id": "1", "val": "hoisting zone", "correct": false },
      { "id": "2", "val": "context execution zone", "correct": false },
      { "id": "3", "val": "strict zone", "correct": false },
      { "id": "4", "val": "temporal dead zone", "correct": true }
    ]
  },
  {
    "id": "JS_fundamentals|declaration_keywords|12",
    "question": [
      {
        "type": "Code",
        "value": "var a = 10\n\n{\n   var a = 20\n}\n\nconsole.log(a)",
        "props": { "language": "javascript" }
      },
      {
        "type": "CText",
        "value": "What is the output of the code above?"
      }
    ],
    "options": [
      { "id": "1", "val": "10", "correct": false },
      { "id": "2", "val": "20", "correct": true }
    ],
    "explanation": [
      {
        "type": "CText",
        "value": "<ins>Var</ins> has functional scope, not block. This means curly brackets are 'invisible' for it, like that:"
      },
      {
        "type": "Code",
        "value": "var a = 10\n\nvar a = 20\n",
        "props": { "language": "javascript" }
      }
    ]
  },
  {
    "id": "JS_fundamentals|declaration_keywords|13",
    "question": [
      {
        "type": "Code",
        "value": "let a = 10\n\n{\n   console.log(a)\n   let a = 20\n}",
        "props": { "language": "javascript" }
      },
      {
        "type": "CText",
        "value": "What is the output of the code above?"
      }
    ],
    "options": [
      { "id": "1", "val": "10", "correct": false },
      { "id": "2", "val": "20", "correct": false },
      { "id": "3", "val": "undefined", "correct": false },
      { "id": "4", "val": "Error", "correct": true }
    ],
    "explanation": [
      {
        "type": "CText",
        "value": "In the code snippet, <ins>a</ins> declared inside the block with <ins>let</ins> shadows the global <ins>a</ins>. When you attempt to <ins>console.log(a)</ins> inside the block before the <ins>let a = 20</ins> declaration, it results in a ReferenceError because the block-scoped <ins>a</ins> is in a Temporal Dead Zone until it's declared."
      }
    ]
  }
]
