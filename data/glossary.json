{
  "API": [
    {
      "type": "Text",
      "value": "API (Application Programming Interface) is a set of rules and protocols that allows different pieces of software to communicate and exchange data. It defines how software components should interact by specifying methods, input data, and expected outcomes.<br></br>In programming, the term API is often discussed in the context of middleware between the frontend and backend (see the \"Next steps\" chapter). But in the context of JavaScript's event loop, an API refers to the functions available within a given environment (such as browsers or Node.js)."
    }
  ],
  "context": [
    {
      "type": "Text",
      "value": "The execution context in JavaScript is an abstract concept that represents the environment in which code is executed. It contains everything necessary to execute a piece of code, including the variables, the this keyword, the outer environment reference, and the code currently being executed. To learn more, visit `Execution context` lesson from `Miscellaneous` chapter."
    }
  ],
  "eval": [
    {
      "type": "Text",
      "value": "eval() is a function that takes a string as an argument and evaluates it as JavaScript code. Essentially, it allows you to execute code stored in a string at runtime."
    },
    {
      "type": "Code",
      "value": "const x = 10;\nconst result = eval('x * 2');  // Evaluates the string as code\nconsole.log(result);  // Output: 20\n",
      "props": { "language": "javascript" }
    },
    {
      "type": "Text",
      "value": "Although eval() might seem useful for executing dynamic code, it comes with several serious drawbacks, which is why it's generally discouraged to use in most situations."
    },
    {
      "type": "List",
      "value": [
        "<b>Security Risk</b>: eval() can execute any JavaScript code, which can be dangerous if it involves untrusted or user-provided input. An attacker could inject malicious code into the string being evaluated, leading to security vulnerabilities such as cross-site scripting (XSS).",
        "<b>Performance Issues</b>: eval() slows down JavaScript execution because the JavaScript engine cannot optimize the code thatâ€™s passed into eval() as efficiently as it can with regular code. When using eval(), the engine has to reprocess and recompile the string as new code, which can reduce performance.",
        "<b>Maintainability</b>: Code that uses eval() is often harder to understand, debug, and maintain, because it's not obvious from the code what the string inside eval() might contain."
      ]
    },
    {
      "type": "Text",
      "value": "While eval() is powerful because it can execute dynamic code, it poses significant security risks and performance issues. Therefore, <b>it should be avoided whenever possible</b>. In modern JavaScript development, using eval() is considered bad practice due to its potential dangers."
    }
  ],
  "mutationObserver": [
    {
      "type": "Text",
      "value": "MutationObserver is a built-in JavaScript object used to watch for changes in the DOM (Document Object Model). It allows developers to efficiently monitor modifications such as adding or removing elements, changing attributes, or updating text content."
    }
  ],
  "PWA": [
    {
      "type": "Text",
      "value": "A Progressive Web App (PWA) is a type of website or web app that behaves like a regular mobile app. <br></br>PWAs can be installed on your home screen without needing to go through an app store. Once installed, they behave like native apps (apps downloaded from the App Store or Google Play), with features like push notifications and a full-screen mode."
    }
  ],
  "queueMicrotask": [
    {
      "type": "Text",
      "value": "<ins>queueMicrotask()</ins> is a method in JavaScript that allows you to schedule a microtask to be executed after the currently executing script and before any macrotasks (like those from <ins>setTimeout</ins> or <ins>setInterval</ins>)."
    },
    {
      "type": "Header",
      "value": "Example:",
      "props": { "size": "md" }
    },
    {
      "type": "Code",
      "value": "console.log('Start')\n\nqueueMicrotask(() => {\n  console.log('Microtask executed')\n})\n\nconsole.log('End')\n\n//Output:\n//Start\n//End\n//Microtask executed",
      "props": { "language": "javascript" }
    },
    {
      "type": "Text",
      "value": "The microtask scheduled by <ins>queueMicrotask()</ins> is executed after the synchronous code has finished running but before any macrotasks would run."
    }
  ],
  "strict_mode": [
    {
      "type": "Text",
      "value": "Strict mode is a feature in JavaScript that helps you write cleaner, more secure, and less error-prone code by enforcing stricter parsing and error handling rules. It can be applied to entire scripts or individual functions. Most importantly, it eliminates so called 'silent errors' which means it changes previously accepted \"bad syntax\" into real errors. To learn more, visit `Strict mode` lesson from `Miscellaneous` chapter."
    }
  ]
}
