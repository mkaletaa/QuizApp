[
  {
    "title": "The beginnings",
    "data": [
      {
        "type": "Text",
        "value": "Since the inception of the Internet in the late 1960s, its evolution led to the creation of the very first web browser, <b>Mosaic</b>, in 1992. However, Mosaic could only present static HTML content. Recognizing the need for better web experiences, the mid-1990s witnessed the introduction of <b>CSS</b> (Cascading Style Sheets) to enhance the visual appearance of web browsers, allowing developers to separate the structure and presentation of web pages. Despite these improvements, web pages remained static, lacking interaction with users. To address this limitation, the creators of Mosaic, Netscape, sought to incorporate a scripting language into their new browser, <b>Netscape Navigator</b>. Two approaches were considered: embedding Java into the browser or developing a new language. The latter option proved successful, leading to the hiring of <b>Brendan Eich</b> to create a brand new scripting language. In a remarkable feat, Brendan Eich accomplished this task in just 10 days, bringing JavaScript to life in 1995. Originally named <b>Mocha</b>, JavaScript was crafted as a dynamically typed language with syntax resembling Java. Its purpose was to inject a high level of interactivity into web pages by granting developers the ability to manipulate the Document Object Model (DOM), representing the structure of an HTML document. Subsequently, the name Mocha was transformed to <b>LiveScript</b> in September 1995, and in December 1995, it underwent another change to JavaScript. This decision was driven by marketing considerations, aiming to leverage the rising popularity of Java at that time."
      }
    ]
  },
  {
    "title": "Standardization",
    "data": [
      {
        "type": "Text",
        "value": "In the realm of Microsoft, <b>JScript</b> emerged as their scripting language, akin to JavaScript, and was implemented in Internet Explorer. Simultaneously, Macromedia's ActionScript, developed for creating interactive content in Adobe Flash, contributed to multimedia-rich web applications. The competition between JavaScript and JScript led to efforts to standardize web scripting languages, resulting in the formation of the European Computer Manufacturer's Association (<b>ECMA</b>) committee. It later established <b>TC-39</b>, a technical committee responsible for the ongoing development and standardization of <b>ECMAScript</b>, the official specification for JavaScript and similar languages."
      }
    ]
  },
  {
    "title": "Ecosystem development",
    "data": [
      {
        "type": "Text",
        "value": "The evolution of JavaScript also saw the rise of popular libraries and frameworks. One of them is <b>jQuery</b>, which is a library released in 2006 by John Resig. Its purpose was to simplify DOM manipulation and event handling, making it easier for developers to write cross-browser JavaScript code. Even though it is not as popular as it used to be (mainly because JS evolved and became easier to use, so jQuery is no longer needed), the majority of websites is still powered by it."
      },
      {
        "type": "Text",
        "value": "<b>Node.js</b>, introduced in 2009 by Ryan Dahl, revolutionized server-side JavaScript development. It's not a library or a framework but a runtime environment. It utilizes the <b>V8</b> JavaScript engine, enabling server-side execution and unifying the language for both client and server tasks. With its event-driven, non-blocking I/O model, Node.js excels in handling concurrent connections, making it efficient for real-time applications. The npm package manager facilitates easy access to a vast array of open-source libraries, fostering a thriving ecosystem."
      },
      {
        "type": "Text",
        "value": "In 2010, Backbone.js emerged as the first notable JavaScript framework, offering structure to web applications and introducing the concept of Models, Views, and Collections. A few months later, Google unveiled <b>AngularJS</b> â€” a robust JavaScript framework designed for building dynamic web applications. AngularJS provided a comprehensive solution for client-side development, boasting features such as two-way data binding and dependency injection. Three years down the line, Facebook introduced a new framework named <b>React</b>, which brought forth a component-based architecture for constructing user interfaces. React rapidly gained popularity due to its efficiency and flexibility in developing intricate and interactive web applications."
      },
      {
        "type": "Text",
        "value": "In 2012 Microsoft developed <b>TypeScript</b>, which brought type annotations to JavaScript. Released as a superset of JS, TypeScript gained popularity for enhancing code quality and developer productivity. It found extensive use, particularly in large-scale applications."
      }
    ]
  },
  {
    "title": "Modern JavaScript",
    "data": [
      {
        "type": "Text",
        "value": "In 2015, ECMAScript 6 (<b>ES6</b>), also known as ECMAScript 2015, was released, introducing significant enhancements to the JavaScript language. ES6 brought features like arrow functions, template literals, classes, and enhanced object literals, providing developers with more powerful and expressive tools for writing modern JavaScript code. After ECMAScript 2015, JavaScript swiftly evolved through ES7, ES8, and beyond, introducing enhanced features for a more modern development experience. The rise of <ins data-key='hint' class='hint'>Progressive Web Applications</ins> (PWAs) heightened the demand for responsive solutions, leading to increased prominence of frameworks, such as <b>Vue.js</b> and <b>Svelte</b>, alongside React and Angular."
      }
    ]
  },
  {
    "title": "",
    "data": [
      {
        "type": "Text",
        "value": "The history of JavaScript is a tale of continuous innovation and adaptation. From its humble beginnings as a scripting language for Netscape Navigator to becoming a versatile language powering both client- and server-side development. JavaScript has evolved with the support of the developer community and the introduction of various tools, libraries, and frameworks. The dynamic nature of JavaScript and its ecosystem continue to shape the ever-changing landscape of web development"
      },
      {
        "type": "YouTube",
        "value": "Sh6lK57Cuk4"
      }
    ]
  }
]
