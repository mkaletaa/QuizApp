[
  {
    "title": "",
    "data": [
      {
        "type": "Text",
        "value": "Strict mode is a feature in JavaScript that helps you write cleaner, more secure, and less error-prone code by enforcing stricter parsing and error handling rules. It can be applied to entire scripts or individual functions. Most importantly, it eliminates so called 'silent errors' which means it changes previously accepted \"bad syntax\" into real errors."
      }
    ]
  },
  {
    "title": "Applying strict mode",
    "data": [
      {
        "type": "Text",
        "value": "To take advantage of its benefits simply put a string <ins>'use strict'</ins> where you want it to be applied."
      },
      {
        "type": "Code",
        "value": "//code above isn't in strict mode\n'use strict'\n//applied globally",
        "props": { "language": "javascript" }
      },
      {
        "type": "Code",
        "value": "function fun() {\n  `use strict`\n  //applied in function scope\n}",
        "props": { "language": "javascript" }
      },
      {
        "type": "Text",
        "value": "But what exactly does it give us?"
      }
    ]
  },
  {
    "title": "Strict mode restrictions",
    "data": [
      {
        "type": "Header",
        "value": "`this` binding",
        "props": { "size": "sm" }
      },
      {
        "type": "Text",
        "value": "Strict mode changes the <ins data-key='context' class='hint'>context</ins> in standalone functions."
      },
      {
        "type": "Code",
        "value": "function example(){\n  console.log(this) // window/global\n}\n\nexample()",
        "props": { "language": "javascript" }
      },

      {
        "type": "Code",
        "value": "\"use strict\"\nfunction example(){\n  console.log(this) // undefined\n}\n\nexample()",
        "props": { "language": "javascript" }
      },
      {
        "type": "Header",
        "value": "Declaration keywords",
        "props": { "size": "sm" }
      },
      {
        "type": "Text",
        "value": "Strict mode enforces the use of <ins>let</ins>, <ins>const</ins> or <ins>var</ins> when declaring a variable."
      },
      {
        "type": "Code",
        "value": "x = 5\nconsole.log(x) //5",
        "props": { "language": "javascript" }
      },
      {
        "type": "Code",
        "value": "\"use strict\"\nx = 5\nconsole.log(x) // Uncaught ReferenceError: x is not defined ",
        "props": { "language": "javascript" }
      },
      {
        "type": "Header",
        "value": "Keyword variable names",
        "props": { "size": "sm" }
      },
      {
        "type": "Code",
        "value": "'use strict'\n// Keywords cannot be used as variable names\n// This will throw an error:\nlet class = 'example'; // SyntaxError: Unexpected strict mode reserved word\n\n// Avoid using reserved keywords as variable names:",
        "props": { "language": "javascript" }
      },
      {
        "type": "Header",
        "value": "Usage of `eval`",
        "props": { "size": "sm" }
      },
      {
        "type": "Text",
        "value": "When using strict mode, the code inside <ins data-key='eval' class='hint'>eval</ins> creates its own scope."
      },
      {
        "type": "Code",
        "value": "eval(\"var x = 20; console.log(x);\") //20\nconsole.log(x + 1) //Uncaught ReferenceError: x is not defined ",
        "props": { "language": "javascript" }
      },
      {
        "type": "Code",
        "value": "\"use strict\"\neval(\"var x = 20; console.log(x);\") //20\nconsole.log(x + 1) //21",
        "props": { "language": "javascript" }
      },
      {
        "type": "Header",
        "value": "Duplicate parameter names",
        "props": { "size": "sm" }
      },
      {
        "type": "Text",
        "value": "Strict mode disallows us from duplicating parameter names."
      },
      {
        "type": "Code",
        "value": "function example(a, a){\n  console.log(a) //2\n}\n\nexample(1, 2)",
        "props": { "language": "javascript" }
      },
      {
        "type": "Code",
        "value": "\"use strict\"\nfunction example(a, a){\n  console.log(a) // Uncaught SyntaxError: Duplicate parameter name not allowed in this context\n}\n\nexample(1, 2)",
        "props": { "language": "javascript" }
      },
      {
        "type": "Header",
        "value": "Octal literals",
        "props": { "size": "sm" }
      },
      {
        "type": "Text",
        "value": "Octal literals are not allowed in strict mode."
      },
      {
        "type": "Code",
        "value": "let num = 075 // ok",
        "props": { "language": "javascript" }
      },
      {
        "type": "Code",
        "value": "\"use strict\"\nlet num = 075\n// Uncaught SyntaxError: Octal literals are not allowed in strict mode.",
        "props": { "language": "javascript" }
      }
    ]
  }
]
