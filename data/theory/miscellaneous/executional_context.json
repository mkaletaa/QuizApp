[
  {
    "title": "",
    "data": [
      {
        "type": "Text",
        "value": "An execution context in JavaScript is an abstract concept that represents the environment in which code is executed. It contains everything necessary to execute a piece of code, including the variables, the this keyword, the outer environment reference, and the code currently being executed. "
      }
    ]
  },
  {
    "title": "`this` keyword",
    "data": [
      {
        "type": "Text",
        "value": "`this` tells the context.<br></br>When we run code outside of any function, the context is the global object, which is `window` in browsers and `global` in Node.js."
      },
      {
        "type": "Code",
        "value": "console.log(this); // window",
        "props": { "language": "javascript" }
      },
      {
        "type": "Text",
        "value": "If code is run inside an object method, `this` refers to the object the method belongs to."
      },
      {
        "type": "Code",
        "value": "const obj = {\n  name: 'Alice',\n  greet() {\n    console.log(this.name); // 'Alice'\n  }\n};\nobj.greet();",
        "props": { "language": "javascript" }
      },
      {
        "type": "Text",
        "value": "If a method is defined inside a nested object, `this` refers to the nearest object the method is called on."
      },
      {
        "type": "Code",
        "value": "const outerObj = {\n  innerObj: {\n    name: 'Bob',\n    greet() {\n      console.log(this.name); // 'Bob'\n    }\n  }\n};\nouterObj.innerObj.greet();",
        "props": { "language": "javascript" }
      },
      {
        "type": "Text",
        "value": "For arrow functions, `this` is determined by the surrounding (lexical) scope at the time of the function's creation. Arrow functions do not have their own `this`, so they inherit it from the outer context."
      },
      {
        "type": "Code",
        "value": "const obj = {\n  name: 'Charlie',\n  greet: () => {\n    console.log(this.name); // undefined (or global object's property in non-strict mode)\n  }\n};\nobj.greet();",
        "props": { "language": "javascript" }
      },
      {
        "type": "Text",
        "value": "For regular functions, the value of `this` depends on how the function is called. Normally, `this` in functions refers to the global object when called in a non-method context."
      },
      {
        "type": "Code",
        "value": "function init() {\n  console.log(this); // window (or global in Node.js)\n}\ninit();",
        "props": { "language": "javascript" }
      },
      {
        "type": "Text",
        "value": "However, in strict mode, `this` is `undefined` in standalone functions."
      },
      {
        "type": "Code",
        "value": "'use strict';\n\nfunction init() {\n  console.log(this); // undefined\n}\ninit();",
        "props": { "language": "javascript" }
      },
      {
        "type": "Text",
        "value": "When a function is defined within an object but not as a method, it still behaves like a standalone function. If such a function is called without an object context, `this` will refer to the global object in non-strict mode, or `undefined` in strict mode."
      },
      {
        "type": "Code",
        "value": "const obj = {\n  age: 120,\n  show: function() {\n    console.log(this); // Points to obj\n  },\n  innerFunc: function() {\n    function notAMethod() {\n      console.log(this); // window (or global in Node.js) in non-strict mode, undefined in strict mode\n    }\n    notAMethod();\n  }\n};\nobj.show();\nobj.innerFunc();",
        "props": { "language": "javascript" }
      }
    ]
  },
  {
    "title": "apply(), call(), bind()",
    "data": [
      {
        "type": "Text",
        "value": "The `apply`, `call`, and `bind` methods are used to manipulate the `this` context within a function. These methods are particularly useful when you want to borrow methods from other objects or control the execution context of a function."
      },
      {
        "type": "Header",
        "value": "apply()",
        "props": { "size": "md" }
      },
      {
        "type": "Text",
        "value": "The `apply()` method calls a function with a given `this` value, and arguments provided as an array (or an array-like object). This allows you to pass arguments to a function in a flexible way, especially useful when the number of arguments is not known beforehand."
      },
      {
        "type": "Code",
        "value": "const obj = { name: 'Alice' };\n\nfunction greet(greeting, punctuation) {\n  console.log(greeting + ', ' + this.name + punctuation);\n}\n\ngreet.apply(obj, ['Hello', '!']); // Output: Hello, Alice!",
        "props": { "language": "javascript" }
      },
      {
        "type": "Header",
        "value": "call()",
        "props": { "size": "md" }
      },
      {
        "type": "Text",
        "value": "The `call()` method also calls a function with a given `this` value, but arguments are provided individually. This method is useful when you know the exact number and order of arguments you need to pass."
      },
      {
        "type": "Code",
        "value": "const person = { name: 'Bob' };\n\ngreet.call(person, 'Hi', '.'); // Output: Hi, Bob.",
        "props": { "language": "javascript" }
      },
      {
        "type": "Header",
        "value": "bind()",
        "props": { "size": "md" }
      },
      {
        "type": "Text",
        "value": "The `bind()` method creates a new function that, when called, has its `this` keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called. This method is particularly useful for setting the context in event handlers or callbacks."
      },
      {
        "type": "Code",
        "value": "const boundGreet = greet.bind(obj, 'Hey');\nboundGreet('?'); // Output: Hey, Alice?",
        "props": { "language": "javascript" }
      },
      {
        "type": "Text",
        "value": "In summary, `apply()`, `call()`, and `bind()` are methods that allow you to specify the `this` value in a function, providing flexibility in managing function execution and context. `apply()` is suitable for arguments as an array, `call()` for individual arguments, and `bind()` for creating a new function with a preset `this` value."
      }
    ]
  }
]
