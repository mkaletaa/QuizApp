[
  {
    "data": [
      {
        "type": "Text",
        "value": "Async/await is a feature in JavaScript that allows you to write asynchronous code in a synchronous style. It is built on top of promises and makes it easier to handle asynchronous operations."
      }
    ]
  },
  {
    "title": "Async functions",
    "data": [
      {
        "type": "Text",
        "value": "An async function can be created by placing <ins>async</ins> keyword before <ins>function</ins> keyword. They always return a promise."
      },
      {
        "type": "Code",
        "value": "async function fetchData(){\n  return 'some data'\n}\n\nasync function voidFunction(){\n  console.log(\"This function doesn't have any return statement\")\n}\n\nconst fetchDataResult = fetchData()\nconst voidFunctionResult = voidFunction()\n\nconsole.log(fetchDataResult instanceof Promise) // true\nconsole.log(voidFunctionResult instanceof Promise) // true",
        "props": { "language": "javascript" }
      },
      {
        "type": "Text",
        "value": "Async functions are a good alternative to Promises because of their syntax which resembles synchronous code."
      },
      {
        "type": "Code",
        "value": "function myFunction() {\n    return Promise.resolve('success');\n}\n\nmyFunction()\n    .then(result => {\n        console.log(result);\n    })\n\n// the same as:\n\nasync function myFunction() {\n    return 'success';\n}\n\nmyFunction()\n    .then(result => {\n        console.log(result); // 'success'\n    });",
        "props": {"language": "javascript" }
      }
    ]
  },
  {
    "title": "Await keyword",
    "data": [
      {
        "type": "Text",
        "value": "The <ins>await</ins> keyword is used inside <ins>async</ins> functions to pause the execution of the function until the promise that goes after it is resolved or rejected. Technically, it could also be followed by something that is not a Promise, but this would be useless and would work as if <ins>await</ins> wasn't there."
      },

      {
        "type": "Code",
        "value": "async function example() {\n  const num = await Promise.resolve(42)\n  console.log(num); // 42\n}",
        "props": { "language": "javascript" }
      },
      {
        "type": "Text",
        "value": "In the example above, the line with <ins>await</ins> keyword screams to the code below it: <i>\"Hey, guys, (a)wait for me to resolve!\"</i> Without it an unresolved Promise would be logged to the console.<br></br>Recently, <ins>await</ins> can also be used outside of functions preceded by the word <ins>async</ins>."
      },
      {
        "type": "Code",
        "value": "//global scope\nconst prom = await Promise.resolve('I'm a promise')\nconsole.log(prom) // 'I'm a promise'",
        "props": { "language": "javascript" }
      }
    ]
  },
  {
    "title": "Using Async/Await with Promises",
    "data": [
      {
        "type": "Text",
        "value": "Remember async functions always return a promise so you can use them alongside with other promises or chain multiple async functions together."
      },
      {
        "type": "Text",
        "value": "For example, to perform multiple asynchronous operations in parallel and wait for all of them to complete, use <ins>Promise.all()</ins> inside an <ins>async</ins> function."
      },
      {
        "type": "Code",
        "value": "async function fetchData1() {\n  return 'Data 1';\n}\n\nasync function fetchData2() {\n  return 'Data 2';\n}\n\nasync function getAllData() {\n  let [data1, data2] = await Promise.all([fetchData1(), fetchData2()]);\n  console.log(data1, data2); // 'Data 1','Data 2'\n}\n\ngetAllData();",
        "props": { "language": "javascript" }
      },
      {
        "type": "Text",
        "value": "In the code below each <ins>async</ins> function will wait for the previous one to complete before proceeding."
      },
      {
        "type": "Code",
        "value": "async function fetchData() {\n  return 'Data';\n}\n\nasync function processData() {\n  let data = await fetchData();\n  console.log('Processing:', data);\n}\n\nprocessData();",
        "props": { "language": "javascript" }
      }
    ]
  }
]
