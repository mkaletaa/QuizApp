[
  {
    "data": [
      {
        "type": "Text",
        "value": "In the previous chapter, we discussed <ins>for</ins> and <ins>while</ins> loops. It turns out these are not the only one methods to perform iterations. Some data types offer special ways to iterate over them."
      }
    ]
  },
  {
    "title": "array.map()",
    "data": [
      {
        "type": "Text",
        "value": "The <ins>map()</ins> method is used to create a new array by applying a function to each element of an existing array. The basic syntax of the <ins>map()</ins> method is as follows:"
      },
      {
        "type": "Code",
        "value": "array.map(function(currentValue, index, arr) {\n  // code to be executed\n}, thisValue)",
        "props": { "language": "javascript" }
      },
      {
        "type": "Text",
        "value": "For example:"
      },
      {
        "type": "Code",
        "value": "const numbers = [10, 20, 30]\n\nconst doubled = numbers.map((num, index, array) => {\n  console.log(index) // 0, 1, 2\n  console.log(array) // [10,20,30], [10,20,30], [10,20,30]\n  \n  return num * 2\n})\n\nconsole.log(doubled) // [20, 40, 60]",
        "props": { "language": "javascript" }
      },
      {
        "type": "Text",
        "value": "In this example, the <ins>map()</ins> method is used to double the values in the numbers array. A new array, <ins>doubled</ins>, is created, containing the results of applying the function to each element in the <ins>numbers</ins> array. <br></br>The <ins>map()</ins> method is specifically designed for arrays and cannot be used to iterate over other data types directly. However, you can convert other data types, such as strings, maps or sets, into arrays using <ins>Array.from()</ins> or the spread operator (...) and then apply the <ins>map()</ins> method."
      },
      {
        "type": "Code",
        "value": "const set = new Set([1, 2, 3, 4, 5])\nconst doubledSet = Array.from(set).map(num => num * 2)\nconsole.log(doubledSet) // [2, 4, 6, 8, 10]",
        "props": { "language": "javascript" }
      },
      {
        "type": "Header",
        "value": "thisValue",
        "props": { "size": "md" }
      },
      {
        "type": "Text",
        "value": "The <b>thisValue</b> argument is an optional parameter that allows you to specify what this should refer to when the callback function is executed. It also appears in other array methods like <ins>filter()</ins> or <ins>reduce()</ins>. By default it is <ins>undefined</ins> in <ins data-key='strict_mode' class='hint'>strict mode</ins> or <ins>window/global</ins> in non-strict mode. If you want to use it, avoid using arrow functions, as they don't bind <ins>this</ins> correctly."
      },
      {
        "type": "Code",
        "value": "const numbers = [1, 2, 3]\n\nconst obj = {\n  multiplier: 10,\n};\n\nnumbers.map(function (num) {\n  console.log(num * this.multiplier) // 10, 20, 30\n}, obj)",
        "props": {"language": "javascript" }
      },
      {
        "type": "Text",
        "value": "If you don't know what is going on with the <ins>this</ins>, visit the \"Execution context\" lesson from \"Miscellaneous\" chapter."
      }
    ]
  },
  {
    "title": "forEach()",
    "data": [
      {
        "type": "Text",
        "value": "The <ins>forEach()</ins> method is primarily used to execute a provided function once for each element in an array. It can also be applied to the values of maps and sets. It is a more concise way to iterate over arrays compared to traditional for loops. Syntax:"
      },
      {
        "type": "Code",
        "value": "array.forEach(function(currentValue, index, arr) {\n  // code to be executed\n}, thisValue)",
        "props": { "language": "javascript" }
      },
      {
        "type": "Text",
        "value": "So the syntax is identical to the map() method. For instance, using <ins>forEach</ins> with an array:"
      },
      {
        "type": "Code",
        "value": "const arr = [1, 2, 3, 4, 5]\narr.forEach(function(value) {\n  console.log(value) // 1, 2, 3, 4, 5\n})",
        "props": { "language": "javascript" }
      },
      {
        "type": "Text",
        "value": "In this example, the <ins>forEach</ins> method iterates over each element in the <ins>arr</ins> array and logs the value to the console."
      },
      {
        "type": "Text",
        "value": "The <ins>forEach</ins> method does not return a new array, it simply executes the provided function for each element in the array."
      },
      {
        "type": "Code",
        "value": "const arr = [1, 2, 3, 4, 5]\narr.forEach(function(value, index, array) {\n  array[index] = value * 2\n})\nconsole.log(arr) // [2, 4, 6, 8, 10]",
        "props": { "language": "javascript" }
      },
      {
        "type": "Text",
        "value": "Unlike some other array methods, <ins>forEach</ins> does not allow for breaking out of the loop early. If you need to stop the iteration based on a condition, you should use a different loop, such as a traditional <ins>for</ins> loop or a <ins>for-of</ins> loop."
      }
    ]
  },
  {
    "title": "for-of Loop",
    "data": [
      {
        "type": "Text",
        "value": "The <ins>for-of</ins> loop is used to iterate over iterable objects like arrays, strings, maps and sets. It allows you to loop through the values of an iterable without needing to access the keys."
      },
      {
        "type": "Code",
        "value": "// Strings\nconst str = \"abc\"\n\nfor(key of str){\n  console.log(key) // \"a\", \"b\", \"c\"\n}\n\n// Arrays\nconst arr = ['a', 'b', 'c']\n\nfor(value of arr){\n  console.log(value) // \"a\", \"b\", \"c\"\n}\n\n// Maps\nconst map = new Map(); map.set(0, 'a'); map.set(1, 'b')\n\nfor(key of map){\n  console.log(key) // [0,\"a\"], [1,\"b\"]\n}\n\n// Sets\nconst set = new Set(); set.add('a'); set.add('b')\n\nfor(key of set){\n  console.log(key) // \"a\", \"b\"\n}",
        "props": { "language": "javascript" }
      },
      {
        "type": "Text",
        "value": "The <ins>for-of</ins> loop cannot be used to iterate over objects directly. However, with the help of <ins>Object.keys()</ins>, <ins>Object.values()</ins>, or <ins>Object.entries()</ins>, you can achieve similar results. These methods return, respectively, the keys, the values, and an array where the first element is the key and the second is the value."
      },
      {
        "type": "Code",
        "value": "const obj = {\n  name: \"Jack\",\n  age: 30,\n  occupation: \"Physician\"\n}\n\nfor (const key of Object.keys(obj)){\n  console.log(\"key: \"+ key+ \", value: \"+ obj[key])\n  // note that obj.key would return undefined\n}\n/* Output:\n  \"key: name, value: Jack\"\n  \"key: age, value: 30\"\n  \"key: occupation, value: Physician\"\n*/\n\nfor (const value of Object.values(obj)){\n  console.log(\"value: \"+ value)\n}\n/* Output:\n  \"value: Jack\"\n  \"value: 30\"\n  \"value: Physician\"\n*/\n\nfor (const entry of Object.entries(obj)){\n  console.log(entry)\n}\n/* Output:\n  [\"name\",\"Jack\"]\n  [\"age\",30]\n  [\"occupation\",\"Physician\"]\n*/",
        "props": { "language": "javascript" }
      }
    ]
  },
  {
    "title": "for-in Loop",
    "data": [
      {
        "type": "Text",
        "value": "The <ins>for-in</ins> loop is used while going through the keys of objects, arrays or strings. Maps or sets are not compatible with it."
      },
      {
        "type": "Code",
        "value": "// Strings\nconst str = \"abc\"\n\nfor(key in str){\n  console.log(key, str[key])\n}\n\n// Arrays\nconst arr = [\"a\", \"b\", \"c\"]\n\nfor(key in arr){\n  console.log(key, arr[key])\n}\n\n// Objects\nconst obj = {0: \"a\", 1: \"b\", 2: \"c\"}\n\nfor(key in obj){\n  console.log(key, obj[key])\n}\n\n/* Outputs of each loop:\n  \"0\" \"a\"\n  \"1\" \"b\"\n  \"2\" \"c\"\n*/",
        "props": { "language": "javascript" }
      },
      {
        "type": "Text",
        "value": "As you can see, <ins>for-in</ins> converts keys into strings.<br></br>If you can, you should favor the <ins>for-of</ins> loop over <ins>for-in</ins> because the latter also iterates over inherited prototype properties, which can lead to unintended behavior."
      }
    ]
  }
]
