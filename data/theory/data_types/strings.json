[
  {
    "title": "Template strings",
    "data": [
      {
        "type": "Text",
        "value": "There are three ways to define a string literal. One of them requires \"double quotes\", the second one requires 'single quotes' and the third one requires `backticks`. The first two work exactly the same but the last which is called template strings or template literals offers three more features. <br></br><b>Multi-line Strings:</b> Strings defined with backticks can span multiple lines without needing special line continuation characters. "
      },
      {
        "type": "Code",
        "value": "const multiLineString = `This is a string\nthat spans multiple\nlines.`\nconsole.log(multiLineString)\n/*\n    This is a string\n    that spans multiple\n    lines.\n*/",
        "props": { "language": "javascript" }
      },
      {
        "type": "Text",
        "value": "<b>String Interpolation</b>: Backticks allow for embedded expressions, using ${expression}, which lets you include variables and expressions within the string."
      },
      {
        "type": "Code",
        "value": "const name = 'Alice'\nconst age = 25\nconst greeting = `Hello, my name is ${name} and I am ${age} years old.`\nconsole.log(greeting) //Hello, my name is Alice and I am 25 years old.",
        "props": { "language": "javascript" }
      },
      {
        "type": "Text",
        "value": "<b>Tag functions</b>: in JavaScript they are a special type of function used in conjunction with template literals. They allow for custom processing of template literal strings before they're ultimately formatted. This feature can be used for advanced string manipulations, such as formatting or filtering, "
      },
      {
        "type": "Code",
        "value": "function tag(strings, ...values) {\n  console.log(strings) // [\"Hello, \",\". You are \",\" years old.\"]\n  console.log(values) // [\"Alice\",30]\n  return (\n    'Processed template: ' +\n    strings[0] +\n    values[0] +\n    strings[1] +\n    values[1] +\n    strings[2]\n  )\n}\n\nconst name = 'Alice'\nconst age = 30\n\nconst result = tag`Hello, ${name}. You are ${age} years old.`\nconsole.log(result) // \"Processed template: Hello, Alice. You are 30 years old.\"",
        "props": { "language": "javascript" }
      }
    ]
  },
  {
    "title": "Methods",
    "data": [
      {
        "type": "Text",
        "value": "Strings in JavaScript offer a variety of methods and properties to manipulate and analyze textual data. Here are some of the key methods you can use:"
      },
      {
        "type": "Text",
        "value": "<b>length</b>: returns the length of the string."
      },
      {
        "type": "Code",
        "value": "const text = 'Hello';\nconsole.log(text.length); // 5",
        "props": { "language": "javascript" }
      },

      {
        "type": "Text",
        "value": "<b>charAt()</b>: returns the character at the specified index."
      },
      {
        "type": "Code",
        "value": "const text = 'Hello';\nconsole.log(text.charAt(1)); // 'e', same as text[1]",
        "props": { "language": "javascript" }
      },

      {
        "type": "Text",
        "value": "<b>toUpperCase()</b>: returns the string converted to uppercase."
      },
      {
        "type": "Code",
        "value": "const text = 'Hello';\nconsole.log(text.toUpperCase()); // 'HELLO'",
        "props": { "language": "javascript" }
      },

      {
        "type": "Text",
        "value": "<b>toLowerCase()</b>: returns the string converted to lowercase."
      },
      {
        "type": "Code",
        "value": "const text = 'Hello';\nconsole.log(text.toLowerCase()); // 'hello'",
        "props": { "language": "javascript" }
      },

      {
        "type": "Text",
        "value": "<b>indexOf()</b>: returns the index of the first occurrence of the specified substring, or -1 if not found."
      },
      {
        "type": "Code",
        "value": "const text = 'Hello world';\nconsole.log(text.indexOf('world')); // 6",
        "props": { "language": "javascript" }
      },

      {
        "type": "Text",
        "value": "<b>lastIndexOf()</b>: returns the index of the last occurrence of the specified substring, or -1 if not found."
      },
      {
        "type": "Code",
        "value": "const text = 'Hello world, world';\nconsole.log(text.lastIndexOf('world')); // 13",
        "props": { "language": "javascript" }
      },

      {
        "type": "Text",
        "value": "<b>split()</b>: splits the string into an array of substrings based on the specified delimiter."
      },
      {
        "type": "Code",
        "value": "const text = 'Hello world';\nconsole.log(text.split(' ')); // ['Hello', 'world']",
        "props": { "language": "javascript" }
      },

      {
        "type": "Text",
        "value": "<b>startsWith()</b>: checks if the string starts with the specified substring."
      },
      {
        "type": "Code",
        "value": "const text = 'Hello world';\nconsole.log(text.startsWith('Hello')); // true",
        "props": { "language": "javascript" }
      },

      {
        "type": "Text",
        "value": "<b>endsWith()</b>: checks if the string ends with the specified substring."
      },
      {
        "type": "Code",
        "value": "const text = 'Hello world';\nconsole.log(text.endsWith('world')); // true",
        "props": { "language": "javascript" }
      },

      {
        "type": "Text",
        "value": "<b>replace()</b>: returns a new string with some or all matches of a pattern replaced by a replacement."
      },
      {
        "type": "Code",
        "value": "const text = 'Hello world';\nconsole.log(text.replace('world', 'JavaScript')); // 'Hello JavaScript'",
        "props": { "language": "javascript" }
      },

      {
        "type": "Text",
        "value": "<b>repeat()</b>: returns a new string with a specified number of copies of the original string."
      },
      {
        "type": "Code",
        "value": "const text = 'Hello';\nconsole.log(text.repeat(3)); // 'HelloHelloHello'",
        "props": { "language": "javascript" }
      },

      {
        "type": "Text",
        "value": "<b>trim()</b>: removes whitespace from both ends of the string."
      },
      {
        "type": "Code",
        "value": "const text = '  Hello world  ';\nconsole.log(text.trim()); // 'Hello world'",
        "props": { "language": "javascript" }
      },

      {
        "type": "Text",
        "value": "<b>includes()</b>: checks if the string contains the specified substring."
      },
      {
        "type": "Code",
        "value": "const text = 'Hello world';\nconsole.log(text.includes('world')); // true",
        "props": { "language": "javascript" }
      },
      {
        "type": "Text",
        "value": "<b>substring</b>: returns a subset of the string between the start and end indices (end index not included). If start is greater than end, the method swaps the two arguments."
      },
      {
        "type": "Code",
        "value": "const text = 'Hello world';\nconsole.log(text.substring(0, 5)); // 'Hello'\nconsole.log(text.substring(6)); // 'world'\nconsole.log(text.substring(5, 0)); // 'Hello'",
        "props": { "language": "javascript" }
      },

      {
        "type": "Text",
        "value": "<b>slice</b>: returns a section of the string, extracted from start to end indices (end index not included). It supports negative indices, which count from the end of the string."
      },
      {
        "type": "Code",
        "value": "const text = 'Hello world';\nconsole.log(text.slice(0, 5)); // 'Hello'\nconsole.log(text.slice(-5)); // 'world'\nconsole.log(text.slice(2, -1)); // 'llo worl'",
        "props": { "language": "javascript" }
      },
      {
        "type": "Text",
        "value": "These are the most often used string methods but this list is not complete. Keep in mind none of these methods modify the original string."
      },
      {
        "type": "Code",
        "value": "let text = 'HELLO WORLD'\n\nlet modifiedText = text.toLowerCase()\n\nconsole.log(text) // 'HELLO WORLD'\nconsole.log(modifiedText) // 'hello world'",
        "props": {"language": "javascript" }
      }
    ]
  }
]
