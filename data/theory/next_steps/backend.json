[
  {
    "title": "What is backend?",
    "data": [
      {
        "type": "Text",
        "value": "JavaScript was initially built for frontend apps but nowadays it can also run on the backend. Backend is the part of an app that handles the server-side logic and database interactions, essentially managing everything that happens behind the scenes. It includes server configuration, database management, authentication, and business logic that powers the front-end. The backend processes client requests, communicates with databases to store or retrieve data, and sends responses back to the front-end. <br></br>To become a backend JavaScript developer, you'll also need knowledge of databases (SQL and NoSQL), API design, and server management are crucial. Backend development involves setting up and maintaining server infrastructure, managing application data, and ensuring security and performance of your applications. But the most important thing on your path to becoming a backend developer is mastering Node.js or other runtime environment."
      }
    ]
  },
  {
    "title": "Node.js",
    "data": [
      {
        "type": "Text",
        "value": "Node.js is an open-source, cross-platform JavaScript runtime environment that executes JavaScript code outside a web browser. Built on Chrome's V8 JavaScript engine, Node.js allows developers to use JavaScript for both client-side and server-side scripting, enabling them to build scalable and high-performance applications. Its non-blocking, event-driven architecture makes it particularly suited for building real-time applications like chat systems and live streaming services. Node.js also has a robust ecosystem, with a vast number of libraries and modules available through npm (Node Package Manager), making it a popular choice for modern web development. <br></br>Node.js can successfully compete with other major technologies used to build backends.<b>Paypal</b>. <br></br>Despite all of that, Node.js has some drawback that were once discussed by the very creator of Node, Ryan Dahl."
      },
      {
        "type": "YouTube",
        "value": "M3BM9TB-8yA"
      }
    ]
  },
  {
    "title": "Node.js frameworks",
    "data": [
      {
        "type": "Text",
        "value": "While Node is pretty cool by its own, why not make it even cooler with frameworks?"
      },
      {
        "type": "Header",
        "value": "Express",
        "props": { "size": "md" }
      },
      {
        "type": "Text",
        "value": "Express is a minimalist web application framework for Node.js, designed to simplify the process of building web applications and APIs. Created by TJ Holowaychuk, Express is renowned for its ease of use and flexibility. It provides a straightforward API for handling routing and middleware, making it an excellent choice for developers who want to quickly set up a server or create an API. While it is flexible and has a vast ecosystem of plugins and extensions, it offers only basic functionality out of the box, which means developers might need to integrate additional tools for more complex needs. Its simplicity makes it ideal for small to medium-sized applications, but it may not handle high-load scenarios as efficiently as newer frameworks."
      },
      {
        "type": "Header",
        "value": "Fastify",
        "props": { "size": "md" }
      },
      {
        "type": "Text",
        "value": "Fastify is a web framework for Node.js that prioritizes high performance and low overhead. Designed to be fast and efficient, Fastify provides features like schema-based validation and asynchronous request handling to optimize performance. It uses JSON Schema for validation and serialization, which enhances both performance and safety. Fastify is highly extensible with support for plugins and hooks, making it a strong choice for applications requiring high performance. However, its focus on modern JavaScript practices and performance might introduce a learning curve for developers new to the framework. Additionally, its smaller ecosystem compared to Express might limit third-party integrations."
      },
      {
        "type": "Header",
        "value": "Nest",
        "props": { "size": "md" }
      },
      {
        "type": "Text",
        "value": "NestJS is a progressive Node.js framework built with TypeScript, designed for building scalable and maintainable server-side applications. It adopts an architecture inspired by Angular, featuring a modular structure that promotes code organization and scalability. NestJS incorporates dependency injection, which facilitates the management of service lifecycles and dependencies. Its use of TypeScript provides strong typing and advanced development features, enhancing the robustness of applications. While its modular and feature-rich approach is advantageous for large-scale projects, it can introduce complexity and a steeper learning curve for developers unfamiliar with advanced concepts like dependency injection and TypeScript."
      }
    ]
  },
  {
    "title": "Other runtimes",
    "data": [
      {
        "type": "Header",
        "value": "Deno",
        "props": { "size": "md" }
      },
      {
        "type": "Text",
        "value": "Deno is a modern runtime for JavaScript and TypeScript, created by Ryan Dahl, the original creator of Node.js. Released in 2020, Deno is designed to address some of the shortcomings of Node.js, offering improved security, built-in TypeScript support, and a more streamlined standard library. Unlike Node.js, Deno does not use npm but instead imports modules via URLs, which simplifies dependency management. It features a secure execution environment, where permissions are explicitly required for file system access, network requests, and environment variables."
      },
      {
        "type": "YouTube",
        "value": "F0G9lZ7gecE"
      },
      {
        "type": "Header",
        "value": "Bun",
        "props": { "size": "md" }
      },
      {
        "type": "Text",
        "value": "Bun is a fast JavaScript runtime designed for performance, built on JavaScriptCore (the engine behind Safari). It aims to replace Node.js, npm, and other JavaScript tooling by offering an all-in-one solution that includes a JavaScript runtime, a package manager, and a bundler. Bun is known for its speed, with faster startup times, efficient execution of scripts, and optimized handling of dependencies compared to other runtimes. It supports Node.js APIs, so many existing Node.js libraries work out of the box with Bun. Its goal is to simplify and speed up JavaScript development."
      }
    ]
  }
]
