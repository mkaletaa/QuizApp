[
  {
    "title": "",
    "data": [
      {
        "type": "Text",
        "value": "In TypeScript, types define the shape and structure of data. They specify what kind of values a variable can hold, what types of arguments functions accept, and what types of values functions return. Types help ensure that the code behaves as expected by catching type-related errors at compile time."
      },
      {
        "type": "Header",
        "value": "any",
        "props": { "size": "md" }
      },
      {
        "type": "Text",
        "value": "The <ins>any</ins> type is a catch-all type that allows a variable to be any type. It disables type checking for that variable, so it should be used sparingly. If you don't specify a type, it is <ins>any</ins> by default."
      },
      {
        "type": "Code",
        "value": "let value: any = \"This can be anything\"",
        "props": { "language": "typescript" }
      },
      {
        "type": "Header",
        "value": "unknown",
        "props": { "size": "md" }
      },
      {
        "type": "Text",
        "value": "The <ins>unknown</ins> type works similarly to <ins>any</ins> but is safer because it requires type checking before performing operations. It represents any value but requires that you perform some form of type assertion or type checking before using it. It is helpful when you start writing your code and don't know yet what a variable should be like."
      },
      {
        "type": "Text",
        "value": "Look how <ins>unknown</ins> warns us about incrementing a string and <ins>any</ins> doesn't (red underline):"
      },
      {
        "type": "Image",
        "value": "https://i.postimg.cc/QCX3W98n/anyunknown.png"
      },
      {
        "type": "Header",
        "value": "never",
        "props": { "size": "md" }
      },
      {
        "type": "Text",
        "value": "The <ins>never</ins> type represents values that should never occur. It is typically used for functions that throw errors or have infinite loops."
      },
      {
        "type": "Code",
        "value": "function error(message: string): never {\n  throw new Error(message)\n}",
        "props": { "language": "typescript" }
      },
      {
        "type": "Header",
        "value": "Primitive types",
        "props": { "size": "md" }
      },
      {
        "type": "Code",
        "value": "let name: string = \"Alice\"\nlet age: number = 30\nlet isActive: boolean = true\nlet value: null = null\nlet result: undefined\nlet sym: symbol = Symbol(\"unique\")",
        "props": { "language": "typescript" }
      },
      {
        "type": "Header",
        "value": "Array types",
        "props": { "size": "md" }
      },
      {
        "type": "Text",
        "value": "Arrays in TypeScript can be defined with specific types to ensure that all elements are of the same type. You can specify an array type in two ways."
      },
      {
        "type": "Code",
        "value": "let numbers: number[] = [1, 2, 3]\nlet strings: Array<string> = [\"hello\", \"world\"]",
        "props": { "language": "typescript" }
      },
      {
        "type": "Header",
        "value": "Tuples",
        "props": { "size": "md" }
      },
      {
        "type": "Text",
        "value": "Tuples allow you to create arrays with a fixed number of elements, where each element can be of a different type."
      },
      {
        "type": "Code",
        "value": "let person: [string, number] = [\"Alice\", 30]",
        "props": { "language": "typescript" }
      },
      {
        "type": "Header",
        "value": "Objects",
        "props": { "size": "md" }
      },
      {
        "type": "Text",
        "value": "Object types define the structure of objects by specifying the properties and their types."
      },
      {
        "type": "Code",
        "value": "let user: { name: string; age: number } = { name: \"Bob\", age: 25 }",
        "props": { "language": "typescript" }
      },
      {
        "type": "Header",
        "value": "Function types",
        "props": { "size": "md" }
      },
      {
        "type": "Text",
        "value": "Object types define the structure of objects by specifying the properties and their types."
      },
      {
        "type": "Code",
        "value": "//A function that takes a string and returns nothing (is a void)\nfunction print(a: string): void {\n  console.log(a)\n}\n\n//A function expression that takes two numbers and returns a number\nlet add: (x: number, y: number) => number = (x, y) => x + y ",
        "props": { "language": "typescript" }
      },
      {
        "type": "Header",
        "value": "Enums",
        "props": { "size": "md" }
      },
      {
        "type": "Text",
        "value": "Enums allow you to define a set of named constants. They can be numeric or string-based."
      },
      {
        "type": "Code",
        "value": "enum Color {\n  Red = 1,\n  Green,\n  Blue,\n}\n\nenum Direction {\n  Up = 'UP',\n  Down = 'DOWN',\n  Left = 'LEFT',\n  Right = 'RIGHT',\n}",
        "props": { "language": "typescript" }
      },
      {
        "type": "Block",
        "value": [
          {
            "type": "Text",
            "value": "In TypeScript dev community enums are often considered not a good choice. Here's why:"
          },
          {
            "type": "YouTube",
            "value": "jjMbPt_H3RQ"
          },
          {
            "type": "Text",
            "value": "However some people defend them:"
          },
          {
            "type": "YouTube",
            "value": "VhzId8v3gYA"
          }
        ],
        "props": {
          "type": "warning"
        }
      }
    ]
  }
]
