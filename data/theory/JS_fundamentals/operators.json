[
  {
    "title": "",
    "data": [
      {
        "type": "Text",
        "value": "Operators are symbols or keywords in programming that are used to perform operations on variables and values. They are fundamental building blocks in programming and are used to manipulate data and variables."
      }
    ]
  },
  {
    "title": "Mathematical operators",
    "data": [
      {
        "type": "Text",
        "value": "You can perform basic mathematical operations in JavaScript, but be cautious with very large or very small numbers, as they may lead to precision issues and unexpected results."
      },
      {
        "type": "Code",
        "value": "console.log(3 + 4); //7\nconsole.log(3 - 2); //1\nconsole.log(3 * 3); //9\nconsole.log(3 / 2); //1.5\n\n// % - modulo, which is the remainder of division\nconsole.log(3 % 2); //1\nconsole.log(9 % 3); //0\n\n// ** - exponentiation\nconsole.log(3 ** 2); //9 - same as Math.pow(a, 2)\nconsole.log(4 ** .5) //2 - same as Math.sqrt(2)",
        "props": { "language": "javascript" }
      },
      {
        "type": "Text",
        "value": "The order of operations is the same as in mathematics."
      },
      {
        "type": "Code",
        "value": "console.log(2 + 2 * 2) //6",
        "props": { "language": "javascript" }
      }
    ]
  },
  {
    "title": "Comparison operators",
    "data": [
      {
        "type": "Text",
        "value": "Comparison operators are used to compare the left side to the right side. They always return either true or false. Due to dynamically typed nature of JavaScript, comparison process is trickier than in statically typed languages."
      },
      {
        "type": "Code",
        "value": "//== - compares both values without comparing their types\nconsole.log(10 == 10) //true\nconsole.log(10 == \"10\") //true\n\n//!= - checks if values are different without checking type\nconsole.log(10 != 20) //true\nconsole.log(10 != 10) //false\nconsole.log(10 != \"10\") //false\n\n//=== - compares both values and their types\nconsole.log(10 === 10) //true\nconsole.log(10 === \"10\") //false\n\n//!== - checks if values or types are different\nconsole.log(10 !== 10) //false\nconsole.log(10 !== \"10\") //true\n\n//< and > - less than and greater than\nconsole.log(10 < 20) //true\nconsole.log(10 > 20) //false\nconsole.log(10 > 10) //false\nconsole.log(10 > \"5\") //true\n\n//<= and >= - less than or equal to and greater than or equal to\nconsole.log(10 <= 10) //true\nconsole.log(10 >= 20) //false\nconsole.log(10 >= \"text\") //false\nconsole.log(10 <= \"text\") //false",
        "props": { "language": "javascript" }
      },
      {
        "type": "Text",
        "value": "When you use the == operator, JavaScript performs type coercion to convert the operands to the same type before making the comparison. In most cases you should use === operator to avoid unexpected behavior. <br></br>I know this might seem illogical for you at first glance. If you still feel confused I encourage you to watch this video:"
      },
      {
        "type": "YouTube",
        "value": "XWNq7XJuwoo"
      }
    ]
  },
  {
    "title": "Logical operators",
    "data": [
      {
        "type": "Header",
        "value": "&& (and)",
        "props": { "size": "md" }
      },
      {
        "type": "Text",
        "value": "The && operator evaluates from left to right and returns the first <b>falsy</b> value it encounters. If no falsy value is found, it returns the last value, whatever it is."
      },
      {
        "type": "Code",
        "value": "let a = 2; \nlet b = 0; \nconsole.log(a && b); // false because b === 0 \nconsole.log(a && true); // true because all values are truthy \nconsole.log(a && 1 && 'hello'); // 'hello' because all values are truthy",
        "props": { "language": "javascript" }
      },

      {
        "type": "Block",
        "value": [
          {
            "type": "Text",
            "value": "We'll talk more about falsy values in the Data structures chapter. For now you need to know that in JS such values as false, 0, \"\", null, or undefined are considered as falsy. Any number other than 0 and any string that is not empty is considered as truthy."
          }
        ],
        "props": {
          "type": "info"
        }
      },
      {
        "type": "Header",
        "value": "|| (or)",
        "props": { "size": "md" }
      },
      {
        "type": "Text",
        "value": "The || operator evaluates from left to right and returns the first <b>truthy</b> value it encounters. If no truthy value is found, it returns the last value, whatever it is."
      },
      {
        "type": "Code",
        "value": "let a = 2; \nlet b = 0; \nconsole.log(a || b); // 2 because a === 2 (truthy) \nconsole.log(b || false); // false because both values are falsy \nconsole.log(null || undefined || 'hello'); // 'hello' because it's the first truthy value",
        "props": { "language": "javascript" }
      },
      {
        "type": "Header",
        "value": "?? (nullish coalescing)",
        "props": { "size": "md" }
      },
      {
        "type": "Text",
        "value": "The ?? operator evaluates from left to right and returns the first value that is not null or undefined. If all values are null or undefined, it returns the last value."
      },
      {
        "type": "Code",
        "value": "let a = null; \nlet b = undefined; \nlet c = 'hello'; \nconsole.log(a ?? b); // undefined because both a and b are null or undefined \nconsole.log(a ?? c); // 'hello' because c is the first defined value \nconsole.log(a ?? b ?? 5); // 5 because both a and b are null or undefined",
        "props": { "language": "javascript" }
      },
      {
        "type": "Header",
        "value": "! (not)",
        "props": { "size": "md" }
      },
      {
        "type": "Text",
        "value": "It is used to negate a boolean value. If the value is true, applying ! will make it false, and vice versa."
      },
      {
        "type": "Code",
        "value": "let a = 2;\nlet b = 0;\nconsole.log(!true); // false \nconsole.log(!false); // true \nconsole.log(a && b); // false because b === 0 \nconsole.log(!(a && b)); // true",
        "props": { "language": "javascript" }
      },
      {
        "type": "Divider"
      },
      {
        "type": "Text",
        "value": "You can use different types of operators in a single expression, but keep in mind their precedence. ! has the highest precedence, followed by &&, then ||, and finally ??. If you want to use ?? with other operators, you'll need parentheses; otherwise, a SyntaxError will occur."
      },
      {
        "type": "Code",
        "value": "console.log(true || false && 0) // true; the same as console.log(true || (false && 0))\n\nconsole.log(true || false ?? 0)  //Uncaught SyntaxError: missing ) after argument list ",
        "props": { "language": "javascript" }
      }
    ]
  },
  {
    "title": "Assignment operators",
    "data": [
      {
        "type": "Text",
        "value": "You've already encountered the '=' sign. This is the assignment operator, which assigns the value on its right to the variable on its left. In JavaScript, there are more assignment operators that allow you to perform various operations and assign the result to a variable in a concise manner"
      },
      {
        "type": "Code",
        "value": "{\n  let a = 5;\n  a += 3; // equivalent to a = a + 3\n  console.log(a); // 8\n}\n\n{\n  let a = 5;\n  a -= 3; // equivalent to a = a - 3\n  console.log(a); // 2\n}\n\n{\n  let a = 5;\n  a *= 3; // equivalent to a = a * 3\n  console.log(a); // 15\n}\n\n{\n  let a = 12;\n  a /= 3; // equivalent to a = a / 3\n  console.log(a); // 4\n}\n\n{\n  let a = 11;\n  a %= 3; // equivalent to a = a % 3\n  console.log(a); // 2\n}",
        "props": { "language": "javascript" }
      },
      {
        "type": "Text",
        "value": "You can use multiple assignment operators in a single line in JavaScript. This allows you to chain assignments together, assigning the same value to multiple variables or updating multiple variables at once."
      },
      {
        "type": "Code",
        "value": "let a, b, c;\na = b = c = 5; // All variables a, b, and c are assigned the value 5",
        "props": { "language": "javascript" }
      },
      {
        "type": "Code",
        "value": "let x = 5;\nlet y = 10;\nlet z = 15;\n\nx += y -= z = 3; \n// z is assigned 3, \n//y is updated to y - z (10 - 3 = 7), \n//x is updated to x + y (5 + 7 = 12)",
        "props": { "language": "javascript" }
      },
      {
        "type": "Text",
        "value": "Here, the assignments are evaluated from right to left, following the usual operator precedence and associativity rules. However, while it is syntactically valid, using multiple assignments in a single line can sometimes reduce code readability and should be done with care."
      },
      {
        "type": "Header",
        "value": "increment and decrement operators",
        "props": { "size": "md" }
      },
      {
        "type": "Code",
        "value": "let x = 10\nx++\nconsole.log(x) //11 (post-increment)\n++x\nconsole.log(x) //12 (pre-increment)\n\nlet y = 10\ny--\nconsole.log(y) //9 (post-decrement)\n--y\nconsole.log(y) //8 (pre-decrement)",
        "props": { "language": "javascript" }
      },
      {
        "type": "Text",
        "value": "From the above code, one might get the impression that x++ is equivalent to ++x, just as y-- is equivalent to --y, but this is not true. The difference lies in when the increment or decrement operation takes effect relative to the expression evaluation: <br></br> x++ : The current value of x is used in the expression, and then x is incremented by 1. <br></br>++x : x is incremented by 1 first, and then the new value of x is used in the expression. <br></br>The same goes with decrement operators."
      },
      {
        "type": "Code",
        "value": "let x = 10\nif(--x<10){\n   console.log(x) //9\n}\n\nlet y = 10\nif(y--<10){\n   //won't meet the condition\n   console.log(y)\n}",
        "props": { "language": "javascript" }
      },
      {
        "type": "Text",
        "value": "The code above is equivalent to this:"
      },
      {
        "type": "Code",
        "value": "let x = 10\nx=x-1\nif(x<10){\n   console.log(x) //9\n}\n\nlet y = 10\nif(y<10){\n   //won't meet the condition\n   console.log(y)\n} y=y-1",
        "props": { "language": "javascript" }
      },
      {
        "type": "Header",
        "value": "&&= (Logical AND Assignment Operator)",
        "props": { "size": "md" }
      },
      {
        "type": "Text",
        "value": "The logical AND assignment operator (&&=) performs a logical AND operation on the variable and assigns the result to that variable. This means it combines the logical AND (&&) with assignment (=), which results in the variable taking the value of the logical AND operation."
      },
      {
        "type": "Code",
        "value": "let a = true; \nlet b = false; \na &&= b; // Equivalent to a = a && b; \nconsole.log(a); // Output: false",
        "props": { "language": "javascript" }
      },
      {
        "type": "Text",
        "value": "In the above example:\n1. Initially, a is true and b is false.\n2. The operation a &&= b performs a logical AND operation between a and b, which results in false.\n3. The result of the logical AND operation is then assigned back to a.\n4. After the operation, a is false."
      },
      {
        "type": "Header",
        "value": "||= (Logical OR Assignment Operator)",
        "props": { "size": "md" }
      },
      {
        "type": "Text",
        "value": "The logical OR assignment operator (||=) performs a logical OR operation on the variable and assigns the result to that variable. This means it combines the logical OR (||) with assignment (=), which results in the variable taking the value of the logical OR operation."
      },
      {
        "type": "Code",
        "value": "let a = false; \nlet b = true; \na ||= b; // Equivalent to a = a || b; \nconsole.log(a); // Output: true",
        "props": { "language": "javascript" }
      },
      {
        "type": "Text",
        "value": "In the above example:\n1. Initially, a is false and b is true.\n2. The operation a ||= b performs a logical OR operation between a and b, which results in true.\n3. The result of the logical OR operation is then assigned back to a.\n4. After the operation, a is true."
      },
      {
        "type": "Header",
        "value": "??= (Nullish Coalescing Assignment Operator)",
        "props": { "size": "md" }
      },
      {
        "type": "Text",
        "value": "The nullish coalescing assignment operator (??=) assigns the right-hand value to the variable if the variable is null or undefined. This combines the nullish coalescing operator (??) with assignment (=), ensuring that a variable is only assigned a new value if it is currently null or undefined."
      },
      {
        "type": "Code",
        "value": "let a = null; \nlet b = 'default'; \na ??= b; // Equivalent to a = a ?? b; \nconsole.log(a); // Output: 'default'",
        "props": { "language": "javascript" }
      },
      {
        "type": "Text",
        "value": "In the above example:\n1. Initially, a is null and b is 'default'.\n2. The operation a ??= b performs a nullish coalescing operation between a and b, which results in 'default'.\n3. The result of the nullish coalescing operation is then assigned back to a.\n4. After the operation, a is 'default'."
      }
    ]
  },
  {
    "title": "Bitwise operators",
    "data": [
      {
        "type": "Text",
        "value": "Bitwise operators in JavaScript perform operations on binary representations of numbers. These operators work directly at the bit level, manipulating the individual bits within the number's binary form. Unlike arithmetic operators, which deal with whole numbers, bitwise operators operate on each bit of a number, providing a low-level way to perform efficient computations. "
      },
      {
        "type": "Code",
        "value": "// AND (&)\n// Compares each bit of two numbers and returns 1 only if both bits are 1\nlet a = 5 // 0101 in binary\nlet b = 3 // 0011 in binary\nconsole.log(a & b) // 1 (0001 in binary)\n// Only the last bit is 1 in both numbers, resulting in 0001 (binary) which is 1.\n\n// OR (|)\n// Compares each bit of two numbers and returns 1 if at least one of the bits is 1\na = 5 // 0101 in binary\nb = 3 // 0011 in binary\nconsole.log(a | b) // 7 (0111 in binary)\n// All bits except the last bit are 1 in at least one number, resulting in 0111 (binary) which is 7.\n\n// XOR (^)\n// Compares each bit of two numbers and returns 1 only if the bits are different\na = 5 // 0101 in binary\nb = 3 // 0011 in binary\nconsole.log(a ^ b) // 6 (0110 in binary)\n// The first and third bits are different in the two numbers, resulting in 0110 (binary) which is 6.\n\n// NOT (~)\n// Inverts all the bits of the number (1 becomes 0 and 0 becomes 1)\na = 5 // 0101 in binary\nconsole.log(~a) // -6\n// Inverting all bits of 0101 gives 1010 in binary, which is -6 in two's complement representation.",
        "props": { "language": "javascript" }
      }
    ]
  }
]
