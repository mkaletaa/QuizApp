[
  {
    "data": [
      {
        "type": "Text",
        "value": "In programming, variables are containers or symbolic names that represent values stored in computer memory. These values can be numbers, text, arrays, objects, functions, or other data structures. Variables provide a way to label and reference data in a program, making it easier for developers to manipulate and work with information."
      }
    ]
  },
  {
    "title": "Why use variables",
    "data": [
      {
        "type": "Text",
        "value": "Using variables becomes particularly advantageous when you need to update a value in multiple places within your code. Let’s say you want to consol.log sum of numbers, when one of them is 20:"
      },
      {
        "type": "Code",
        "value": "console.log(20+1)\nconsole.log(20+2)\nconsole.log(20+3)\n //more console.logs\nconsole.log(20+50)",
        "props": { "language": "javascript" }
      },
      {
        "type": "Text",
        "value": "But then you decide you want to change 20 to 10. You could do it manually one by one, but this is arduous method. Better idea is to store your number in a variable and then change it in just one place."
      },
      {
        "type": "Code",
        "value": "let nr= 1\nconsole.log(nr+1)\nconsole.log(nr+2)\nconsole.log(nr+3)\n //more console.logs\nconsole.log(nr+50)",
        "props": {  "language": "javascript" }
      },
      {
        "type": "Text",
        "value": "Another use case for variables is to maintain code readability. Consider a program that utilizes the number of months in a year, the number of hours on a clock, and the age of a 12-year-old person. As it is easy to imagine, without using variables, the number 12 would be repeated throughout the code. You could use comments to indicate what each instance of twelve represents, but the issue with comments is that we may forget to include them. Therefore, a better idea is to create variables: monthsInYear, hoursOnClock, and age, to avoid later mistakes. "
      },
      {
        "type": "Code",
        "value": "//before:\nconsole.log(\"John's age:\", 12)\nconsole.log('Approximate number of hours in a year: ', 2 * 12 * 30 * 12)\n\n//after:\nlet johnsAge = 12\nlet hoursOnClock = 12\nlet daysInMonth = 30\nlet monthsInYear = 12\nconsole.log(\"John's age:'\", johnsAge)\nconsole.log( 'Approximate number of hours in a year: ', 2 * hoursOnClock * daysInMonth * monthsInYear )",
        "props": {"language": "javascript" } 
      }
    ]
  },
  {
    "title": "Variables names",
    "data": [
      {
        "type": "Text",
        "value": "To ensure that a variable name is correct, it must meet all of the following conditions: "
      },
      {
        "type": "List",
        "value": [
          {
            "type": "ListElement",
            "value": "The variable name must not be a reserved keyword. Keywords are specific words in a programming language that have predefined meanings and cannot be used for other purposes, such as defining variables. You can check all of the reserved keywords <a href='https://www.w3schools.com/js/js_reserved.asp'>here</a>"
          }
        ]
      },
      {
        "type": "Code",
        "value": "//these are examples of bad variable names:\nlet if = 1\nlet for = 2\nlet true = 3",
        "props": { "language": "javascript" }
      },
      {
        "type": "List",
        "value": [
          {
            "type": "ListElement",
            "value": "The variable name must not contain certain special characters like space, period, comma, or hyphen."
          }
        ]
      },
      {
        "type": "Code",
        "value": "//these are examples of bad variable names:\nlet my@variable = 1\nlet my variable = 2\nlet my-variable = 3",
        "props": { "language": "javascript" }
      },
      {
        "type": "List",
        "value": [
          {
            "type": "ListElement",
            "value": "The variable name should not start with a digit (0-9). It's a standard rule in most programming languages that a variable name must begin with a letter."
          }
        ]
      },
      {
        "type": "Code",
        "value": "//bad:\nlet 1variable = 1\n\n//good:\nlet variable1 = 2\nlet v4r148l3 = 3",
        "props": { "language": "javascript" }
      },
      {
        "type": "Text",
        "value": "In addition, there are other rules for naming variables, which are not strictly necessary for the program to function but are good practice to maintain code cleanliness. Here are the most important ones:"
      },
      {
        "type": "Header",
        "value": "Descriptive and meaningful:",
        "props": { "size": "sm" }
      },
      {
        "type": "Text",
        "value": "Aim for clarity and avoid ambiguous names."
      },
      {
        "type": "Code",
        "value": "let dewuiydhsj = {} //isn't meaningful at all\nlet itemsInTheShoppingCartThatTheUserCurrentlyHasSelected = {} //descriptive but too long\nlet itsInCUsSel = {} //good length but poorly descriptive\nlet itemsInCart = {} //perfect",
        "props": { "language": "javascript" }
      },
      {
        "type": "Header",
        "value": "Camel case:",
        "props": { "size": "sm" }
      },
      {
        "type": "Text",
        "value": "Use camel case for multi-word variable names. Start with a lowercase letter, and capitalize the first letter of each subsequent concatenated word."
      },
      {
        "type": "Code",
        "value": "let userName = \"John Doe\"; ",
        "props": { "language": "javascript" }
      },
      {
        "type": "Header",
        "value": "Consistency:",
        "props": { "size": "sm" }
      },
      {
        "type": "Text",
        "value": "Maintain a consistent naming style throughout your codebase."
      },
      {
        "type": "Code",
        "value": "//consistent: \nlet firstName = \"John\" \nlet lastName = \"Doe\"\n let age = 30\n\n//inconsistent:\nlet firstName = \"John\" \nlet last_name = \"Doe\"\n let Age = 30",
        "props": { "language": "javascript" }
      },
      {
        "type": "Header",
        "value": "Avoid single-letter names:",
        "props": { "size": "sm" }
      },
      {
        "type": "Text",
        "value": "Except for loop counters or very short programs, avoid single-letter variable names. Use names that convey meaning."
      },
      {
        "type": "Block",
        "value": [
          {
            "type": "Text",
            "value": "JavaScript is case-sensitive"
          },
          {
            "type": "Code",
            "value": "//these are two different variables:\nlet name = 'John'\nlet Name = 'John'",
            "props": {"language": "javascript" }
          }
        ],
        "props": {
          "type": "warning"
        }
      }
    ]
  },
  {
    "title": "Keywords",
    "data": [
      {
        "type": "Text",
        "value": "Consider following code:"
      },
      {
        "type": "Code",
        "value": "name = \"some name\"\nconsole.log(name) //some name ",
        "props": { "language": "javascript" }
      },
      {
        "type": "Text",
        "value": "Unless you don’t use strict mode this code is correct, however it is highly advisable to precede variable name with a keyword. In JS there are 3 of them:"
      },
      {
        "type": "Text",
        "value": "<ul><li><b>var</b> is the oldest of these keywords and can be found in older JavaScript sources. However, since ES6 was introduced in 2015, it is not advisable to use var anymore. The reasons for this recommendation will be explained later.</li><li><b>let</b> is a newer keyword introduced in ES6 and is generally preferred over var. It offers more predictable scoping behavior and is considered an improvement in terms of variable declaration.</li><li><b>const</b> was also introduced in ES6. It is an abbreviation for \"constant\", signifying that variables declared with this keyword cannot be reassigned after their initial assignment in the code. This helps enforce immutability and is particularly useful when you want to ensure that a variable remains constant throughout the program. Aside from this, const behaves similarly to let</li></ul>"
      },
      {
        "type": "Text",
        "value": "<b>Differences</b>"
      },
      {
        "type": "Text",
        "value": "<p>1. Scope</p><p>Var has function scope. This means that a variable declared with var is visible throughout the entire function, even if it was declared inside a block. let has block scope. A variable declared with let is only visible inside the nearest block.</p>"
      },
      {
        "type": "Code",
        "value": "function example() {\n\t\t\t{\n\t\t\t\t\t\tvar x = 5;\n\t\t\t\t\t\tlet y = 10n\n\t\t\t\t\t\tconst z = 20;\n\t\t\t}\n\t\t\tconsole.log(x); // 5\n\t\t\tconsole.log(y) // Error: y is not defined\n\t\t\tconsole.log(z); // Error: z is not defined\n}",
        "props": { "language": "javascript" }
      },
      {
        "type": "Text",
        "value": "Using var in for loops can lead to unexpected behavior due to its function-scoped nature. Specifically, var does not create a new scope for each iteration of the loop. Instead, it retains the same scope throughout the entire function or global context in which it is declared. This could lead to unintentional overwriting of other variables."
      },
      {
        "type": "Code",
        "value": "for(var i = 0; i < 5; i++){\n\t    console.log(i) // 0, 1, 2, 3, 4, \n}\nconsole.log(i) //5\n\nfor(let j = 0; j < 5; j++){\n\t    console.log(j) // 0, 1, 2, 3, 4\n}\nconsole.log(j) // Cannot find name 'j'",
        "props": {"language": "javascript" }
      },
      {
        "type": "Text",
        "value": "<p>2. Hoisting</p><p>var is subject to hoisting, which means that the variable is lifted to the top of its scope and can be used before its declaration. let is also hoisted but is in a \"temporal dead zone\" (TDZ), meaning that it cannot be used before its declaration, even though it is lifted.</p>"
      },
      {
        "type": "Code",
        "value": "console.log(a); // undefined\nvar a = 5;\nconsole.log(b); // Error: b is not defined\nlet b = 10;",
        "props": { "language": "javascript" }
      },
      {
        "type": "Text",
        "value": "<p>3. Redeclaration</p><p>var allows for multiple declarations of the same variable within the same scope. The new declaration overwrites the previous one. let does not allow multiple declarations within the same scope. An error will occur if you try to redeclare a variable.</p>"
      },
      {
        "type": "Code",
        "value": "var x = 5\nvar x = 10; // OK\nlet y = 5;\nlet y = 10; // Error: Identifier 'y' has already been declared",
        "props": { "language": "javascript" }
      },
      {
        "type": "Text",
        "value": "<p>3. The global object</p><p>This difference isn't crucial in everyday code but it's worthy to mention in out of a chronicler's duty. <br></br>In JavaScript, when var is used to declare a variable in the global scope (i.e., outside of any function or block), it creates a property on the global object. In browsers, the global object is window, and in Node.js, it is global.</p>"
      },
      {
        "type": "Code",
        "value": "var a = 10\nlet b = 20\nconsole.log(window.a) // 10\nconsole.log(window.b) // undefined",
        "props": { "language": "javascript" }
      }
    ]
  }
]
