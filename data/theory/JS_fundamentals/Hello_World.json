[
  {
    "data": [
      {
        "componentType": "Text",
        "value": "<p>It’s time to write your very first JavaScript code. You can do it on many ways. Read about them below and choose your favourite.</p>"
      }
    ]
  },

  {
    "title": "Borwser console",
    "data": [
      {
        "componentType": "Text",
        "value": "JavaScript, originally designed for browsers, provides a convenient way to execute code through the browser console. This tutorial focuses on Chrome, but the process looks similar in other browsers. To get started open the Console; Press Ctrl+Shift+I (Windows/Linux) or Cmd+Option+I (Mac) to launch the Chrome Developer Tools. Then navigate to the 'Console' tab. Type console.log('Hello, World'); in the console and press Enter. This will display 'Hello, World!' in the console. For multiline scripts, press Shift+Enter to create a line break without executing the code immediately. Use the up and down arrow keys to navigate through previously entered commands. This feature is helpful for accessing and modifying your command history. To clear the console, press Ctrl+L (Windows/Linux) or Cmd+K (Mac). "
      },

      {
        "componentType": "Block",
        "value": [
          {
            "componentType": "Text",
            "value": "&bull; There's no difference between <b>'</b>single quotes<b>'</b> and <b>\"</b>double quotes<b>\"</b> in JavaScript. They work exactly the same. <p>&bull; Semicolons at the end of each line are optional. Wheter you use them or not is a matter of personal preference or the coding conventions followed by your team.</p>"
          }
        ],
        "props": {
          "type": "info"
        }
      }
    ]
  },

  {
    "title": "CodePen",
    "data": [
      {
        "componentType": "Text",
        "value": "While the built-in browser console is excellent for quick testing of short scripts, it may become inconvenient for longer ones. To overcome this limitation without leaving your browser, you can utilize online code editors such as CodePen. You’ll find there three tabs for HTML, CSS and JavaScript. Open the third one, then type console.log(\"Hello World\") and open the console (bottom left corner). After short time you’ll see the output."
      }
    ]
  },
  {
    "title": "<script/>",
    "data": [
      {
        "componentType": "Text",
        "value": "<p>Another method to execute JavaScript code involves embedding it within the script tag in an HTML document. Create a file with an .html extension and structure it accordingly:</p><p> If you have Visual Studio Code installed, you can expedite this process by entering an exclamation mark (!) and pressing Tab. This action prompts your IDE to generate the HTML skeleton. Next, click on your .html file - this will open your default browser. Access the browser console to confirm that your script has been successfully executed. You can also create a file with .js extension and link it inside an .html file. To keep it simple, make sure both files are placed in the same folder.</p>"
      }
    ]
  },
  {
    "title": "Node.js",
    "data": [
      {
        "componentType": "Text",
        "value": "<p>Yet another way to run JS code requires installing Node.js. Node is the most popular JavaScript runtime, providing an environment for executing JavaScript code outside the browser. To initiate this, open a terminal and type node. This command opens the mode called REPL (Read Evaluate Print Loop), allowing you to enter and execute JavaScript code directly in the terminal. This works similarly to a browser console mentioned earlier. </p>                      <p>You can also execute complete JavaScript files by specifying the file path after the node command. For example: node your_script.js. This executes the JavaScript code present in the specified file and displays the output in the terminal. This method is particularly useful for running more extensive scripts and managing dependencies in your projects. If you use VS Code, you can run JavaScript code using built-in features or extensions. Right-click anywhere in the code editor. Select \"Run Code\" or use the keyboard shortcut Ctrl+Alt+N. This will open a terminal at the bottom of VS Code, displaying the code execution results. Using the Debugger: Add a breakpoint by clicking on the left margin next to the desired line of code. Click the \"Run and Debug\" icon (green arrow) in the left sidebar. Choose the \"Node.js\" configuration and press the green arrow to start debugging. The debugger will stop at breakpoints, allowing you to inspect variables and step through the code. Using Extensions: Install the \"Code Runner\" extension from the Visual Studio Code Marketplace. Select the code you want to run, then right-click and choose \"Run Code\" or use the keyboard shortcut Ctrl+Alt+N. \"Code Runner\" enables quick code execution directly from the editor.</p>"
      },
      {
        "componentType": "Block",
        "value": [
          {
            "componentType": "Text",
            "value": "Although Node is commonly used for developing backend applications, it is highly recommended to have it installed even if you are working on frontend apps. This is because Node is utilized to manage dependencies through npm (Node Package Manager)."
          }
        ],
        "props": {
          "type": "info"
        }
      },
      {
        "componentType": "Block",
        "value": [
          {
            "componentType": "Text",
            "value": ".log() is the most popular method of the console object; however, not the only one. There are also other methods, such as .warn(), .error(), .debugger(), or .table(). <a href=\"https://tutorial.techaltum.com/javascript-console.html\">read more</a>"
          }
        ],
        "props": {
          "type": "info"
        }
      }
    ]
  }
]
