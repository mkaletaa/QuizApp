[
  {
    "title": "converting to string",
    "data": [
      {
        "type": "Text",
        "value": "Where are many ways to turn non-string type into a string. The simplest is to use String constructor."
      },
      {
        "type": "Header",
        "value": "String",
        "props": { "size": "md" }
      },
      {
        "type": "Code",
        "value": "// Number to string\nlet number = 2024;\nconsole.log(String(number)); // '2024'\n\n// Boolean to string\nlet isActive = true;\nconsole.log(String(isActive)); // 'true'\n\n// Array to string\nlet colors = ['red', 'green', 'blue'];\nconsole.log(String(colors)); // 'red,green,blue'\n\n// Object to string\nlet user = { id: 1, name: 'John Doe' };\nconsole.log(String(user)); // '[object Object]'\n\n// Null to string\nlet nothing = null;\nconsole.log(String(nothing)); // 'null'\n\n// Undefined to string\nlet missing;\nconsole.log(String(missing)); // 'undefined'\n\n// Function to string\nlet greet = function() { return 'Hello, World!'; };\nconsole.log(String(greet)); // 'function() { return 'Hello, World!'; }'",
        "props": { "language": "javascript" }
      },
      {
        "type": "Header",
        "value": ".toString()",
        "props": { "size": "md" }
      },
      {
        "type": "Code",
        "value": "// Number to string\nlet num = 2024;\nconsole.log(num.toString()); // '2024'\n\n// Boolean to string\nlet isActive = false;\nconsole.log(isActive.toString()); // 'false'\n\n// Array to string\nlet fruits = ['apple', 'banana', 'cherry'];\nconsole.log(fruits.toString()); // 'apple,banana,cherry'\n\n// Object to string\nlet car = { make: 'Toyota', model: 'Corolla' };\nconsole.log(car.toString()); // '[object Object]'\n\n// Function to string\nlet add = function(a, b) { return a + b; };\nconsole.log(add.toString()); // 'function(a, b) { return a + b; }'\n\n// Symbol to string\nlet id = Symbol('id');\nconsole.log(id.toString()); // 'Symbol(id)'\n\n// Date to string\nlet today = new Date();\nconsole.log(today.toString()); // e.g., 'Sun Jul 28 2024 16:43:21 GMT+0200 (Central European Summer Time)'\n\n// BigInt to string\nlet bigNumber = 987654321987654321987654321n;\nconsole.log(bigNumber.toString()); // '987654321987654321987654321'",
        "props": { "language": "javascript" }
      },
      {
        "type": "Header",
        "value": "+ \"\"",
        "props": { "size": "md" }
      },
      {
        "type": "Code",
        "value": "// Number to string\nlet number = 2024;\nconsole.log(number + \"\"); // '2024'\n\n// Boolean to string\nlet isActive = true;\nconsole.log(isActive + \"\"); // 'true'\n\n// Array to string\nlet fruits = ['apple', 'banana', 'cherry'];\nconsole.log(fruits + \"\"); // 'apple,banana,cherry'\n\n// Object to string\nlet car = { make: 'Toyota', model: 'Corolla' };\nconsole.log(car + \"\"); // '[object Object]'\n\n// Null to string\nlet nullValue = null;\nconsole.log(nullValue + \"\"); // 'null'\n\n// Undefined to string\nlet undefinedValue = undefined;\nconsole.log(undefinedValue + \"\"); // 'undefined'\n\n// Function to string\nlet add = function(a, b) { return a + b; };\nconsole.log(add + \"\"); // 'function(a, b) { return a + b; }'\n\n// Symbol to string\nlet id = Symbol('id');\ntry {\n    console.log(id + \"\"); // Throws a TypeError\n} catch (e) {\n    console.error(e); // TypeError: Cannot convert a Symbol value to a string\n}\n\n// Date to string\nlet today = new Date();\nconsole.log(today + \"\"); // e.g., 'Sun Jul 28 2024 16:43:21 GMT+0200 (Central European Summer Time)'\n\n// BigInt to string\nlet bigNumber = 987654321987654321987654321n;\nconsole.log(bigNumber + \"\"); // '987654321987654321987654321'",
        "props": { "language": "javascript" }
      },
      {
        "type": "Header",
        "value": "JSON.stringify()",
        "props": { "size": "md" }
      },
      {
        "type": "Text",
        "value": "We can utilize the JSON object to convert values to a string format using JSON.stringify(), but be aware that it cannot handle functions, symbols, BigInt values, Map and Set objects, and undefined within objects or arrays, which will either return undefined or cause errors. If you want to stringify an object which contains some methods, they would be omitted from the resulting string."
      },
      {
        "type": "Code",
        "value": "// Array to string\nlet fruits = ['apple', 'banana', 'cherry']\nconsole.log(JSON.stringify(fruits)) // '[\"apple\",\"banana\",\"cherry\"]'\n\n// Object to string\nlet car = { make: 'Toyota', model: 'Corolla' }\nconsole.log(JSON.stringify(car)) // '{\"make\":\"Toyota\",\"model\":\"Corolla\"}'\n\n// Null to string\nlet nullValue = null\nconsole.log(JSON.stringify(nullValue)) // 'null'\n\n// Undefined to string\nlet undefinedValue\nconsole.log(JSON.stringify(undefinedValue)) // 'undefined' (outside objects or arrays)\n\nlet objWithUndefined = { key: undefined }\nconsole.log(JSON.stringify(objWithUndefined)) // '{}'\n\n// Function to string\nfunction add(a, b) {\n  return a + b\n}\nconsole.log(JSON.stringify(add)) // 'undefined'\n\n// Symbol to string\nlet id = Symbol('id')\nconsole.log(JSON.stringify(id)) // 'undefined'\n\n// Date to string\nlet today = new Date()\nconsole.log(JSON.stringify(today)) // e.g., '\"2024-07-28T14:43:21.000Z\"'\n\n// BigInt to string\nlet bigNumber = 987654321987654321987654321n\nconsole.log(JSON.stringify(bigNumber)) // 'undefined'\n\n// Object with method\nlet objWithMethod = {\n  name: 'John',\n  greet() {\n    return 'Hello!'\n  },\n}\nconsole.log(JSON.stringify(objWithMethod)) // '{\"name\":\"John\"}'\n\n// Map to string\nlet map = new Map()\nmap.set('key1', 'value1')\nmap.set('key2', 'value2')\nconsole.log(JSON.stringify(map)) // 'undefined'\n\n// Set to string\nlet set = new Set()\nset.add('item1')\nset.add('item2')\nconsole.log(JSON.stringify(set)) // 'undefined'",
        "props": { "language": "javascript" }
      },
      {
        "type": "Text",
        "value": "Those are only some methods, there are many more of them."
      },
      {
        "type": "Code",
        "value": "console.log(`${123}`) // \"123\"\nconsole.log(`${true}`) // \"true\"\nconsole.log(`${null}`) // \"null\"\nconsole.log(`${undefined}`) // \"undefined\"\n\nconsole.log('Number: '.concat(123)) // \"Number: 123\"\nconsole.log('Boolean: '.concat(true)) // \"Boolean: true\"\n\nconsole.log([1, 2, 3].join()) // \"1,2,3\"\nconsole.log([1, 2, 3].join('-')) // \"1-2-3\"\n\nconsole.log(String.raw`The number is ${123}`) // \"The number is 123\"",
        "props": { "language": "javascript" }
      }
    ]
  },
  {
    "title": "converting to number",
    "data": [
      {
        "type": "Header",
        "value": "Number()",
        "props": { "size": "md" }
      },
      {
        "type": "Code",
        "value": "console.log(Number('42')) // 42\nconsole.log(Number('3.14')) // 3.14\nconsole.log(Number(true)) // 1\nconsole.log(Number(false)) // 0\nconsole.log(Number(null)) // 0\nconsole.log(Number(undefined)) // NaN\nconsole.log(Number('')) // 0\nconsole.log(Number('Hello')) // NaN",
        "props": { "language": "javascript" }
      },
      {
        "type": "Header",
        "value": "+",
        "props": { "size": "md" }
      },
      {
        "type": "Text",
        "value": "This one is very popular due to its simplicity."
      },
      {
        "type": "Code",
        "value": "console.log(+'42') // 42\nconsole.log(+'3.14') // 3.14\nconsole.log(+true) // 1\nconsole.log(+false) // 0\nconsole.log(+null) // 0\nconsole.log(+undefined) // NaN\nconsole.log(+'') // 0\nconsole.log(+'Hello') // NaN",
        "props": { "language": "javascript" }
      },
      {
        "type": "Header",
        "value": "Math",
        "props": { "size": "md" }
      },
      {
        "type": "Code",
        "value": "console.log(Math.floor('42.5')) // 42\nconsole.log(Math.ceil('3.14')) // 4\nconsole.log(Math.round('3.6')) // 4  ",
        "props": {"language": "javascript" }
      },
      {
        "type": "Header",
        "value": "parseInt(), parseFloat()",
        "props": { "size": "md" }
      },
      {
        "type": "Code",
        "value": "console.log(parseInt('42', 10)) // 42\nconsole.log(parseInt('3.14', 10)) // 3 (tylko część całkowita)\nconsole.log(parseInt('42px', 10)) // 42\nconsole.log(parseInt('0xF', 16)) // 15 (szesnastkowa)\nconsole.log(parseInt('10', 2)) // 2 (binarnie)\n\nconsole.log(parseFloat('42.5')) // 42.5\nconsole.log(parseFloat('3.14abc')) // 3.14\nconsole.log(parseFloat('abc42.5')) // NaN",
        "props": {"language": "javascript" }
      }
    ]
  },
  {
    "title": "conversion to Boolean",
    "data": [
      {
        "type": "Header",
        "value": "Boolean",
        "props": { "size": "md" }
      },
      {
        "type": "Code",
        "value": "let value = 0\nlet boolValue = Boolean(value) // false",
        "props": { "language": "javascript" }
      },
      {
        "type": "Text",
        "value": "Not to confuse with new Boolean() which sometimes leads to unwanted behavior."
      },
      {
        "type": "Code",
        "value": "const bool = new Boolean(false)\n\n// 'bool' variable has false value but as it was defined via constructor it is a complex type - therefore it cannot be falsy\nif (bool) {\n  console.log('bool is truthy') // 'bool is truthy'\n}",
        "props": { "language": "javascript" }
      },
      {
        "type": "Header",
        "value": "!!",
        "props": { "size": "md" }
      },
      {
        "type": "Code",
        "value": "let value = 'Hello'\nlet boolValue = !!value // true",
        "props": {"language": "javascript" }
      }
    ]
  },
  {
    "title": "miscellaneous",
    "data": [
        {
          "type": "Text",
          "value": "As JavaScript is a dynamically typed language, there are some quirks regarding type conversion that have led to many memes. One of the most famous is the \"banana\" meme."
        },
        {
            "type": "Code",
            "value": "console.log(('b' + 'a' + + 'a' + 'a').toLowerCase()); // 'banana'",
            "props": {"language": "javascript" }
        },
        {
          "type": "Text",
          "value": "There exists even a whole GiHub repository called wtfjs where many of JS weird features are described and explained. <a href='https://github.com/denysdovhan/wtfjs'>Link</a> <br></br>Here are most notable of them:"
        },
        {
            "type": "Code",
            "value": "[1, 2, 3] + [4, 5, 6] // '1,2,34,5,6'\n\"1\" + 2 //\"12\"\n2 + \"1\" //\"21\"\n2 + 2 + \"3\" + 3  //\"433\"\n[]  + []  //\"\"\ntrue + true + true //3\n{} + {}  //\"[object Object][object Object]\"",
            "props": {"language": "javascript" }
        },
        {
            "type": "Image",
            "value": "https://i.postimg.cc/0NcnN1N9/image.png"
        }
    ]
  }
]
