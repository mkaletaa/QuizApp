[
  {
    "data": [
      {
        "type": "Text",
        "value": "It's time to dive deeper into objects."
      }
    ]
  },
  {
    "title": "Non-static methods",
    "data": [
      {
        "type": "Header",
        "value": "isPrototypeOf",
        "props": { "size": "md" }
      },
      {
        "type": "Text",
        "value": "Checks if an object exists in another object's prototype chain."
      },
      {
        "type": "Code",
        "value": "function Parent() {}\nfunction Child() {}\n\nChild.prototype = new Parent();\n\nconst childInstance = new Child();\nconsole.log(Parent.prototype.isPrototypeOf(childInstance)); // true\nconsole.log(Child.prototype.isPrototypeOf(childInstance));  // true\nconsole.log(Object.prototype.isPrototypeOf(childInstance));  // true",
        "props": { "language": "javascript" }
      },
      {
        "type": "Header",
        "value": "propertyIsEnumerable",
        "props": { "size": "md" }
      },
      {
        "type": "Text",
        "value": "Checks if a property is an own property of the object and if it is enumerable."
      },
      {
        "type": "Code",
        "value": "const obj = { name: 'John', age: 30 };\nconsole.log(obj.propertyIsEnumerable('name')); // true\nconsole.log(obj.propertyIsEnumerable('toString')); // false (inherited property)",
        "props": { "language": "javascript" }
      },
      {
        "type": "Header",
        "value": "toString",
        "props": { "size": "md" }
      },
      {
        "type": "Text",
        "value": "Returns a string representation of the object."
      },
      {
        "type": "Code",
        "value": "const obj = { name: 'John', age: 30, toString: function() { return `Name: ${this.name}, Age: ${this.age}`; }};\nconsole.log(obj.toString()); // 'Name: John, Age: 30'",
        "props": { "language": "javascript" }
      },
      {
        "type": "Header",
        "value": "valueOf",
        "props": { "size": "md" }
      },
      {
        "type": "Text",
        "value": "Returns the primitive value of the specified object."
      },
      {
        "type": "Code",
        "value": "const numObject = { value: 42, valueOf: function() { return this.value; }};\nconsole.log(numObject.valueOf()); // 42\nconsole.log(numObject + 10); // 52 (uses valueOf to convert to primitive)",
        "props": { "language": "javascript" }
      },
      {
        "type": "Header",
        "value": "toLocaleString",
        "props": { "size": "md" }
      },
      {
        "type": "Text",
        "value": "Returns a string representing the object, formatted according to the locale settings."
      },
      {
        "type": "Code",
        "value": "const date = new Date('2023-09-25T12:00:00');\nconsole.log(date.toLocaleString('en-US')); // e.g., '9/25/2023, 12:00:00 PM'\nconsole.log(date.toLocaleString('fr-FR')); // e.g., '25/09/2023 Ã  12:00:00'",
        "props": { "language": "javascript" }
      }
    ]
  },
  {
    "title": "Static methods",
    "data": [
      {
        "type": "Text",
        "value": "You already know Object.create() and Object.defineProperty() from the previous lesson, so.."
      },
      {
        "type": "Header",
        "value": "Object.keys",
        "props": { "size": "md" }
      },
      {
        "type": "Text",
        "value": "Returns an array of a given object's own enumerable property names."
      },
      {
        "type": "Code",
        "value": "const obj = { a: 1, b: 2, c: 3 };\nconst keys = Object.keys(obj);\nconsole.log(keys); // ['a', 'b', 'c']",
        "props": { "language": "javascript" }
      },
      {
        "type": "Header",
        "value": "Object.values",
        "props": { "size": "md" }
      },
      {
        "type": "Text",
        "value": "Returns an array of a given object's own enumerable property values."
      },
      {
        "type": "Code",
        "value": "const obj = { a: 1, b: 2, c: 3 };\nconst values = Object.values(obj);\nconsole.log(values); // [1, 2, 3]",
        "props": { "language": "javascript" }
      },
      {
        "type": "Header",
        "value": "Object.entries",
        "props": { "size": "md" }
      },
      {
        "type": "Text",
        "value": "Returns an array of a given object's own enumerable string-keyed property [key, value] pairs."
      },
      {
        "type": "Code",
        "value": "const obj = { a: 1, b: 2, c: 3 };\nconst entries = Object.entries(obj);\nconsole.log(entries); // [['a', 1], ['b', 2], ['c', 3]]",
        "props": { "language": "javascript" }
      },
      {
        "type": "Header",
        "value": "Object.freeze",
        "props": { "size": "md" }
      },
      {
        "type": "Text",
        "value": "Freezes an object, preventing new properties from being added to it and marking all existing properties as non-writable."
      },
      {
        "type": "Code",
        "value": "const obj = { a: 1 };\nObject.freeze(obj);\nobj.a = 2; // This will not change the value\nconsole.log(obj.a); // 1",
        "props": { "language": "javascript" }
      },
      {
        "type": "Header",
        "value": "Object.seal",
        "props": { "size": "md" }
      },
      {
        "type": "Text",
        "value": "Seals an object, preventing new properties from being added to it but allowing existing properties to be modified."
      },
      {
        "type": "Code",
        "value": "const obj = { a: 1 };\nObject.seal(obj);\nobj.a = 2; // This will change the value\nconsole.log(obj.a); // 2\nobj.b = 3; // This will not work\nconsole.log(obj.b); // undefined",
        "props": { "language": "javascript" }
      },
      {
        "type": "Header",
        "value": "Object.preventExtensions",
        "props": { "size": "md" }
      },
      {
        "type": "Text",
        "value": "Prevents new properties from being added to an object, but allows existing properties to be modified and deleted."
      },
      {
        "type": "Code",
        "value": "const obj = { a: 1 };\nObject.preventExtensions(obj);\nobj.b = 2; // This will not work\nconsole.log(obj.b); // undefined\nobj.a = 2; // This will work\nconsole.log(obj.a); // 2",
        "props": { "language": "javascript" }
      },
      {
        "type": "Code",
        "value": "const target = { a: 1 };\nconst source = { b: 2, c: 3 };\nObject.assign(target, source);\nconsole.log(target); // { a: 1, b: 2, c: 3 }",
        "props": { "language": "javascript" }
      },
      {
        "type": "Header",
        "value": "Object.fromEntries",
        "props": { "size": "md" }
      },
      {
        "type": "Text",
        "value": "Transforms a list of key-value pairs into an object."
      },
      {
        "type": "Code",
        "value": "const entries = [['a', 1], ['b', 2], ['c', 3]];\nconst obj = Object.fromEntries(entries);\nconsole.log(obj); // { a: 1, b: 2, c: 3 }",
        "props": { "language": "javascript" }
      },
      {
        "type": "Header",
        "value": "Object.assign",
        "props": { "size": "md" }
      },
      {
        "type": "Text",
        "value": "Copies the values of all enumerable own properties from one or more source objects to a target object."
      },
      {
        "type": "Code",
        "value": "const target = { a: 1 };\nconst source = { b: 2, c: 3 };\nconst result = Object.assign(target, source);\nconsole.log(result); // { a: 1, b: 2, c: 3 }",
        "props": { "language": "javascript" }
      }
    ]
  }
]
