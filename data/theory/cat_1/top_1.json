[
  {
    "data": [
      {
        "type": "Math",
        "value": "`sum(wwwwwwwwwwwwwwwwwwwwwwwwwwiwwwvvv)`",
        "props": { 
          "height": 70,
          "fontSize": 15
        }
      },
      {
        "type": "Divider"
      },
      {
        "type": "Text",
        "value": "<ins id='test'>&nbsp;Test&nbsp;</ins> Na samym wstępie coś o strukturze.<ins id='hello'>&nbsp;Hello World&nbsp;</ins> Plik z teorią podzielony jest na segmenty. Segmenty są oddzielony nagłówkami, które się przyklejają do góry ekranu a miarę scrollowania. Oto jak wygląda to w kodzie:"
      },
      {
        "type": "Code",
        "value": "[\n\t\t\t{\n\t\t\t\t\t\t\"title\": \"tytuł segmentu (opcjonalny)\",\n\t\t\t\t\t\t\"data\": [//tutaj znajduje się tablica komponentów danego segmentu\n]\n}\n//,kolejny segment]",
        "props": { "height": 200, "language": "typescript" }
      },
      {
        "type": "Text",
        "value": "Powyższy kod zawira szkielet każdego pliku z teorią. Jak widać jest to właściwie tablica, której każdy element jest obiektem będącym reprezentacją segmentu. Każdy segment posiada opcjonalny klucz title oraz obowiązkowy klucz data którego wartość stanowi tablica komponentów. Żeby aplikacja wygenerowała jakiś komponnet, np text albo obraz należy jej najpierw powiedzieć co to ma być. Można to osiągnąć przy pomocy plików JSON. Zapisane w nich informacje zostaną przekonwertowane przez aplikację na widoczne dla użytkownika komponnety. Każdy komponnet ma obowiązkowy klucz 'type' oraz klucz 'value'. Prawie każdy ma opcjonalny klucz 'props' wewnątrz którego można określić dodatkowe parametry. "
      }
    ]
  },
  {
    "title": "Block",
    "data": [
      {
        "type": "Text",
        "value": "Ten komponent może przybrać jedną z czterech form:"
      },
      {
        "type": "Block",
        "value": [
          {
            "type": "Text",
            "value": "info"
          }
        ],
        "props": {
          "type": "info"
        }
      },
      {
        "type": "Block",
        "value": [
          {
            "type": "Text",
            "value": "warning"
          }
        ],
        "props": {
          "type": "warning"
        }
      },
      {
        "type": "Block",
        "value": [
          {
            "type": "Text",
            "value": "important"
          }
        ],
        "props": {
          "type": "important"
        }
      },
      {
        "type": "Block",
        "value": [
          {
            "type": "Text",
            "value": "task"
          }
        ],
        "props": {
          "type": "task"
        }
      },
      {
        "type": "Block",
        "value": [
          {
            "type": "Text",
            "value": "To jedyny komponent, w którym props jest zawsze wymagane. "
          }
        ],
        "props": {
          "type": "warning"
        }
      },
      {
        "type": "Block",
        "value": [
          {
            "type": "Text",
            "value": "Wewnątrz niego można wyświetlać dosłownie wszystkie inne komponenty. i i i i i i i i i  i i i i i i i i"
          },
          {
            "type": "Header",
            "value": "Header wewnątrz block"
          },
          {
            "type": "Image",
            "value": "https://i.postimg.cc/vHL8D75v/image.png"
          }
        ],
        "props": {
          "type": "info"
        }
      },
      {
        "type": "Block",
        "value": [
          {
            "type": "Text",
            "value": "Otwórz plik xxx i zacznij tworzyć"
          },
          {
            "type": "List",
            "value": [
              {
                "type": "ListElement",
                "value": "służy do wyświetlania list"
              },
              {
                "type": "ListElement",
                "value": "wartością ListElement może być tylko tekst, włączając w to <u>znaczniki htmla</u>"
              },
              {
                "type": "ListElement",
                "value": "Nie powinno tu być żadnych obrazów itp. Jeśli chcesz żeby element listy zawierał obraz wstaw go pod komponentem ListElement"
              }
            ]
          }
        ],
        "props": {
          "type": "task"
        }
      }
    ]
  },
  {
    "title": "Text",
    "data": [
      {
        "type": "Text",
        "value": "Komponentem, jaki jest używany najczęściej jest Text. Można z jego użyciem zrobić właściwie wszystko, co można zrobić w HTML. Można na przykład <b>pogrubić text</b>, <i>pochylić</i> albo <u>podkreślić</u> a nawet dodać <a href='https://www.youtube.com/watch?v=xvFZjo5PgG0'>link</a>. <br></br> Jeśli chcesz dodać nowy akapit użyj znacznika \\<br>\\</br>. Można tu też wstawiać inne tagi HTML-owskie, jak \\img, div, math, ale to że można niekoniecznie znaczy, że należy. "
      }
    ]
  },
  {
    "title": "Image",
    "data": [
      {
        "type": "Text",
        "value": "Kolejnym komponentem jaki poznasz jest Image. Jest to preferowany sposób wyświetlania zdjęć. Aby wstawić jakieś zdjęcie wejdź na stronę https://postimages.org/ Upewnij się, że obraz nie będzie miał limitu wygaśnięcia (domyślna opcja) i go wgraj. Wygenerowane zostanie kilka linków, skopiuj drugi od góry (bezpośredni odnośnik) czyli ten z końcówką .jpg, .png albo .webp. Następnie wklej go w miejsce wartości klucza 'value'. Przykład:"
      },
      {
        "type": "Image",
        "value": "https://i.postimg.cc/TP99hbh5/image.png"
      },
      {
        "type": "Text",
        "value": "Ten komponent może mieć opcjonalnie klucz props, w którym można określić orientację obrazu i jego opis. klucz 'orientation' może mieć jedną z pięciu wartości: landscape lub horizontal (dla obrazów poziomych), portrait lub vertical (dla obrazów pionowych) oraz square (dla obrazów kwadratowych). Jeśli brakuje klucza orientation, domyślnie zdjęcie będzie kwadratowe."
      },
      {
        "type": "Image",
        "value": "https://i.postimg.cc/PJ9Gc9jH/image.png",
        "props": {
          "description": "to jest opis zdjęcia",
          "orientation": "vertical"
        }
      },
      {
        "type": "Image",
        "value": "https://i.postimg.cc/2SzJGhMT/image.png",
        "props": { "orientation": "landscape" }
      },
      {
        "type": "Image",
        "value": "https://i.postimg.cc/vHL8D75v/image.png"
      }
    ]
  },
  {
    "title": "Header",
    "data": [
      {
        "type": "Text",
        "value": "Headery to nagłówki, które nie przyklejają sie u góry podczas scrollowania. Używane są do podziału segmentu na podsegmenty. Mogą przybierać duży (lg), mały (sm) lub średni (md) rozmiar. "
      },
      {
        "type": "Header",
        "value": "mogą być duże",
        "props": { "size": "lg" }
      },
      {
        "type": "Header",
        "value": "mogą być średnie (domyślna opcja)",
        "props": { "size": "md" }
      },
      {
        "type": "Header",
        "value": "mogą być małe",
        "props": { "size": "sm" }
      }
    ]
  },
  {
    "title": "List i ListElement",
    "data": [
      {
        "type": "List",
        "value": [
          {
            "type": "ListElement",
            "value": "służy do wyświetlania list"
          },
          {
            "type": "ListElement",
            "value": "wartością ListElement może być tylko tekst, włączając w to <u>znaczniki htmla</u>"
          },
          {
            "type": "ListElement",
            "value": "Nie powinno tu być żadnych obrazów itp. Jeśli chcesz żeby element listy zawierał obraz wstaw go pod komponentem ListElement"
          }
        ]
      },
      {
        "type": "Image",
        "value": "https://i.postimg.cc/vHL8D75v/image.png"
      },
      {
        "type": "List",
        "value": [
          {
            "type": "ListElement",
            "value": "a następnie dodaj kolejny ListElement"
          }
        ]
      }
    ]
  },
  {
    "title": "YouTube",
    "data": [
      {
        "type": "Text",
        "value": "Aby wstawić film z YT skopiuj 11 ostatnich znaków jego adresu url i wklej jako wartość klucza value"
      },
      {
        "type": "YouTube",
        "value": "x28XdyME968"
      }
    ]
  },
  {
    "title": "Math",
    "data": [
      {
        "type": "Text",
        "value": "Teoretycznie możesz zapisywać wzory matematyczne z użyciem html-owego znacznika \\<math> ale jest to bardzo niewygodne. Przykład: <br></br> <br></br> Taki zapis jest mało estetyczny, zarówno dla twórcy, bo kod jest mocno rozwleczony, jak i dla użytkownika, bo nawiasy mają różne wielkości. Dlatego stosuj go tylko w przypadku bardzo krótkich zapisów. W większości przypadków będziesz potrzebować komponentu Math. Aby go użyć, wejdź na stronę <a href='https://asciimath.org/'>ascii math</a> i wygeneruj co tam chcesz. Możesz wspomóc się sztuczną inteligencją jeśli nie znasz tego zapisu równań matematycznych. Następnie wklej jako wartość klucza value. <b>Pamiętaj o backtickach (`) na początku i na końcu wzoru.</b> Bez nich otzymasz zwykły tekst. Przykład:"
      },
      {
        "type": "Math",
        "value": "`sum_(i=1)^n i^3=((n(n+1))/2)^2`"
      },
      {
        "type": "Text",
        "value": "A tutaj bez backticków:"
      },
      {
        "type": "Math",
        "value": "sum_(i=1)^n i^3=((n(n+1))/2)^2"
      },
      {
        "type": "Text",
        "value": "Wewnątrz opcjonalnego klucza props można określić rozmiar czcionki:"
      },
      {
        "type": "Math",
        "value": "formula: `E=mc^2`",
        "props": { "fontSize": 30 }
      }
    ]
  },
  {
    "title": "Code",
    "data": [
      {
        "type": "Text",
        "value": "Służy do wyświetlania kodu. Aby dodać nową linię wpisz \\n."
      },
      {
        "type": "Code",
        "value": "let str1 = 'Hello' \nlet str2 = 'World' \nconsole.log(str1+str2) //Hello World",
        "props": { "height": 200, "language": "" }
      }
    ]
  }
]
