[
  {
    "data": [
      {
        "type": "Text",
        "value": "Na samym wstępie coś o strukturze. Plik z teorią podzielony jest na segmenty. Segmenty są oddzielone nagłówkami, które się przyklejają do góry ekranu w miarę scrollowania. Oto jak wygląda to w kodzie:"
      },
      {
        "type": "Code",
        "value": "[\n   {\n      \"title\": \"tytuł segmentu (opcjonalny)\",\n      \"data\": [\n         //tutaj znajduje się tablica komponentów danego segmentu\n      ]\n}\n//[kolejny segment]",
        "props": { "language": "json" }
      },
      {
        "type": "Text",
        "value": "Powyższy kod zawiera szkielet każdego pliku z teorią. Jak widać jest to właściwie tablica, której każdy element jest obiektem będącym reprezentacją segmentu. Każdy segment posiada opcjonalny klucz title oraz obowiązkowy klucz data którego wartość stanowi tablica komponentów. Żeby aplikacja wygenerowała jakiś komponnet, np text albo obraz należy jej najpierw powiedzieć co to ma być. Można to osiągnąć przy pomocy plików JSON. Zapisane w nich informacje zostaną przekonwertowane przez aplikację na widoczne dla użytkownika komponnety. Każdy komponnet ma obowiązkowy klucz 'type' oraz klucz 'value'. Prawie każdy ma opcjonalny klucz 'props' wewnątrz którego można określić dodatkowe parametry. "
      }
    ]
  },

  {
    "title": "Text",
    "data": [
      {
        "type": "Text",
        "value": "Komponentem, jaki jest używany najczęściej jest Text. Można z jego użyciem zrobić prawie wszystko, co można zrobić w HTML. Można na przykład <b>pogrubić text</b>, <i>pochylić</i> albo <u>podkreślić</u> dodać<sub>indeks</sub> a nawet <a href='https://www.youtube.com/watch?v=xvFZjo5PgG0'>link</a>. <br></br> Jeśli chcesz dodać nowy akapit użyj znacznika \\<br>\\</br>. Można tu też wstawiać inne tagi HTML-owskie, jak \\img, div, ale to że można niekoniecznie znaczy, że należy. <br></br> za pomocą opcjonalnego klucza props można określić czy chcemy aby tekst był wyśrodkowany czy od lewej. Domyślnie jest od lewej."
      },
      {
        "type": "Text",
        "value": "Ten jest wyśrodkowany",
        "props": { "center": true }
      },
      {
        "type": "Text",
        "value": "A ten od lewej"
      },
      "A ten to sam string. On jest zawsze wyśrodkowany.",
      {
        "type": "CText",
        "value": "Jest jeszcze CText, który też jest zawsze wyśrodkowany"
      }
    ]
  },
  {
    "title": "Image",
    "data": [
      {
        "type": "Text",
        "value": "Kolejnym komponentem jaki poznasz jest Image. Jest to preferowany sposób wyświetlania zdjęć. Aby wstawić jakieś zdjęcie wejdź na stronę https://postimages.org/ Upewnij się, że obraz nie będzie miał limitu wygaśnięcia (domyślna opcja) i go wgraj. Wygenerowane zostanie kilka linków, skopiuj drugi od góry (bezpośredni odnośnik) czyli ten z końcówką .jpg, .png albo .webp. Następnie wklej go w miejsce wartości klucza 'value'. Przykład:"
      },
      {
        "type": "Image",
        "value": "https://i.postimg.cc/TP99hbh5/image.png"
      },
      {
        "type": "Text",
        "value": "Ten komponent może mieć opcjonalnie klucz props, w którym można określić opis. "
      },
      {
        "type": "Image",
        "value": "https://i.postimg.cc/PJ9Gc9jH/image.png",
        "props": {
          "description": "to jest opis zdjęcia"
        }
      },
      {
        "type": "Image",
        "value": "https://i.postimg.cc/2SzJGhMT/image.png"
      },
      {
        "type": "Image",
        "value": "https://i.postimg.cc/vHL8D75v/image.png"
      }
    ]
  },
  {
    "title": "Header",
    "data": [
      {
        "type": "Text",
        "value": "Headery to nagłówki, które nie przyklejają sie u góry podczas scrollowania. Używane są do podziału segmentu na podsegmenty. Mogą przybierać duży (lg), mały (sm) lub średni (md) rozmiar. "
      },
      {
        "type": "Header",
        "value": "mogą być duże",
        "props": { "size": "lg" }
      },
      {
        "type": "Header",
        "value": "mogą być średnie (domyślna opcja)",
        "props": { "size": "md" }
      },
      {
        "type": "Header",
        "value": "mogą być małe",
        "props": { "size": "sm" }
      }
    ]
  },
  {
    "title": "Divider",
    "data": [
      {
        "type": "Text",
        "value": "Dividery to poziome linie służące do graficznego rozdzielenia zawartości. Posiadają tylko jeden klucz - type."
      },
      {
        "type": "Divider"
      }
    ]
  },
  {
    "title": "List i ListElement",
    "data": [
      {
        "type": "ListElement",
        "value": "służy do wyświetlania list"
      },
      {
        "type": "ListElement",
        "value": "<ins data-key='hello' class='hint'>&nbsp;gggg&nbsp;</ins> wartością ListElement może być tylko tekst, włączając w to <u>znaczniki htmla</u>"
      },
      {
        "type": "ListElement",
        "value": "Nie powinno tu być żadnych obrazów itp. Jeśli chcesz żeby element listy zawierał obraz wstaw go pod komponentem ListElement"
      },
      {
        "type": "Image",
        "value": "https://i.postimg.cc/vHL8D75v/image.png"
      },
      {
        "type": "List",
        "value": [
          {
            "type": "ListElement",
            "value": "a następnie dodaj kolejny ListElement"
          }
        ]
      }
    ]
  },
  {
    "title": "YouTube",
    "data": [
      {
        "type": "Text",
        "value": "Aby wstawić film z YT skopiuj 11 ostatnich znaków jego adresu url i wklej jako wartość klucza value"
      },
      {
        "type": "YouTube",
        "value": "x28XdyME968"
      }
    ]
  },
  {
    "title": "Math",
    "data": [
      {
        "type": "Text",
        "value": "Aby go użyć, wejdź na stronę <a href='https://asciimath.org/'>ascii math</a> i wygeneruj co tam chcesz. Możesz wspomóc się sztuczną inteligencją jeśli nie znasz tego zapisu równań matematycznych. Następnie wklej jako wartość klucza value. <b>Pamiętaj o backtickach (`) na początku i na końcu wzoru.</b> Bez nich otzymasz zwykły tekst. Przykład:"
      },
      {
        "type": "Math",
        "value": "`sum_(i=1)^n i^3=((n(n+1))/2)^2`"
      },
      {
        "type": "Text",
        "value": "A tutaj bez backticków:"
      },
      {
        "type": "Math",
        "value": "sum_(i=1)^n i^3=((n(n+1))/2)^2"
      },
      {
        "type": "Text",
        "value": "Niestety wysokość tego komponentu nie jest dynamiczna, więc trzeba ją ustawić ręcznie. Wewnątrz opcjonalnego klucza props można określić rozmiar czcionki i wysokość komponentu:"
      },
      {
        "type": "Math",
        "value": "formula: `E=mc^2`",
        "props": { "fontSize": 30, "height": 100 }
      }
    ]
  },
  {
    "title": "Code",
    "data": [
      {
        "type": "Text",
        "value": "Służy do wyświetlania kodu. Aby dodać nową linię wpisz \\n."
      },
      {
        "type": "Code",
        "value": "let str1 = 'Hello' \nlet str2 = 'World' \nconsole.log(str1+str2) //Hello World",
        "props": { "language": "javascript" }
      }
    ]
  },
  {
    "title": "Block",
    "data": [
      {
        "type": "Text",
        "value": "Ten komponent może przybrać jedną z czterech form:"
      },
      {
        "type": "Block",
        "value": [
          {
            "type": "Text",
            "value": "info"
          }
        ],
        "props": {
          "type": "info"
        }
      },
      {
        "type": "Block",
        "value": [
          {
            "type": "Text",
            "value": "warning"
          }
        ],
        "props": {
          "type": "warning"
        }
      },
      {
        "type": "Block",
        "value": [
          {
            "type": "Text",
            "value": "important"
          }
        ],
        "props": {
          "type": "important"
        }
      },
      {
        "type": "Block",
        "value": [
          {
            "type": "Text",
            "value": "task"
          }
        ],
        "props": {
          "type": "task"
        }
      },
      {
        "type": "Block",
        "value": [
          {
            "type": "Text",
            "value": "To jedyny komponent, w którym props jest zawsze wymagane. "
          }
        ],
        "props": {
          "type": "warning"
        }
      },
      {
        "type": "Block",
        "value": [
          {
            "type": "Text",
            "value": "Wewnątrz niego można wyświetlać dosłownie wszystkie inne komponenty. i i i i i i i i i  i i i i i i i i"
          },
          {
            "type": "Header",
            "value": "Header wewnątrz block"
          },
          {
            "type": "Image",
            "value": "https://i.postimg.cc/vHL8D75v/image.png"
          }
        ],
        "props": {
          "type": "info"
        }
      },
      {
        "type": "Block",
        "value": [
          {
            "type": "Text",
            "value": "Otwórz plik xxx i zacznij tworzyć"
          },
          {
            "type": "List",
            "value": [
              {
                "type": "ListElement",
                "value": "służy do wyświetlania list"
              },
              {
                "type": "ListElement",
                "value": "wartością ListElement może być tylko tekst, włączając w to <u>znaczniki htmla</u>"
              },
              {
                "type": "ListElement",
                "value": "Nie powinno tu być żadnych obrazów itp. Jeśli chcesz żeby element listy zawierał obraz wstaw go pod komponentem ListElement"
              }
            ]
          }
        ],
        "props": {
          "type": "task"
        }
      }
    ]
  },
  {
    "title": "Spoiler",
    "data": [
      {
        "type": "Text",
        "value": "Spoiler to przycisk, którego dotknięcie otwiera bottom sheet."
      },
      {
        "type": "Spoiler",
        "value": [
          {
            "type": "Text",
            "value": "To jest zawartość spoilera"
          }
        ]
      },
      {
        "type": "Text",
        "value": "Można opcjonalnie koreślić napis na przycisku oraz procent wysokości ekranu jaki ma zająć bottom sheet zaraz po otwarciu (domyślnie 50%)"
      },
      {
        "type": "Spoiler",
        "value": [
          {
            "type": "Text",
            "value": "0 - 25% <br></br> 1 - 50% <br></br> 2 - 75%"
          }
        ],
        "props": {
          "text": "custom napis",
          "index": 2
        }
      }
    ]
  },
  {
    "title": "Hint",
    "data": [
      {
        "type": "Text",
        "value": "Hint właściwie nie jest komponentem. Działa podobnie jak SpoilerButton z tym że nie jest on oddzielnym przyciskiem, a jest wbudowany w tekst. <ins data-key='hello' class='hint'>Kliknij mnie</ins> ."
      },

      {
        "type": "Code",
        "value": "{\n  \"type\": \"Text\",\n  \"value\": \"<ins data-key='klucz' class='hint'>&nbsp;zawartość&nbsp;</ins>\"\n}",
        "props": { "language": "json" }
      },
      {
        "type": "Text",
        "value": "znacznik ins powinien mieć class ustawione na hint i określony data-key. W pliku glossary.json trzeba jeszcze określić zawartość bottom sheeta. "
      },
      {
        "type": "Code",
        "value": "{\n  \"klucz\": [\n    {\n      \"type\": \"Text\",\n      \"value\": \"Hello World\"\n    }\n  ]\n}",
        "props": { "language": "json" }
      }
    ]
  }
]
